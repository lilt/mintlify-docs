swagger: "2.0"
info:
  title: Lilt REST API
  version: v2.0
  contact:
    name: Lilt REST API Support
    url: "https://lilt.com/docs/api"
    email: support@lilt.com
  description: |
    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:
      * Training of and translating with interactive, adaptive machine translation
      * Large-scale translation memory
      * The Lexicon (a large-scale termbase)
      * Programmatic control of the Lilt CAT environment
      * Translation memory synchronization

    Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.

    ## Authentication

    Requests are authenticated via REST API key, which requires the Business plan.

    Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.

    For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.

    ## Quotas

    Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request.

host: lilt.com
basePath: /2
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  BasicAuth:
    type: basic
  ApiKeyAuth:
    type: apiKey
    in: query
    name: key
security:
  - ApiKeyAuth: []
  - BasicAuth: []
tags:
  - name: Workflows
    description: These endpoints are only relevant if Lilt Workflows are enabled for your organization. Any other Workflow related topics you notice within these docs will also only be relevant for a Workflows enabled organization.
paths:
  /:
    get:
      description: |+
        This resource does not have any attributes. It lists the name of the
        REST API.

        This endpoint can be used to verify REST API keys and to check the
        availability of the REST API.

      operationId: root
      parameters: []
      responses:
        "200":
          description: A status object.
          schema:
            title: ApiRoot
            type: object
            properties:
              api_name:
                type: string
                example: Lilt REST API v2
              api_root:
                type: string
                example: /2
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve the REST API root
      tags:
        - Root
  /files:
    get:
      description: |-
        Retrieves one or more files available to your user. Files are not associated with a project or a memory. They are unprocessed and can be used later in the project/document creation workflow step.

        To retrieve a specific file, specify the <strong>id</strong> request parameter. To retrieve all files, omit the <strong>id</strong> request parameter.

        Example CURL command:
        ```
         curl -X GET https://lilt.com/2/files?key=API_KEY&id=274```
      operationId: getFiles
      parameters:
        - description: A unique File identifier.
          in: query
          name: id
          required: false
          type: integer
        - description: |+
            One or more labels. This will return the files which contain all of
            the given labels.
          in: query
          name: labels
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      produces:
        - application/json
      responses:
        "200":
          description: A list of files.
          schema:
            title: FilesList
            type: array
            items:
              $ref: "#/definitions/SourceFile"
        "403":
          description: User does not have permission for provided file.
        "410":
          description: File deleted.
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve a File
      tags:
        - Files
    post:
      description: |+
        Upload a File in any of the formats [documented in our knowledge
        base](https://support.lilt.com/hc/en-us/articles/360020816253-File-Formats).
        Request parameters should be passed in as query string parameters.

        Example CURL command:
        ```
          curl -X POST https://lilt.com/2/files?key=API_KEY&name=en_US.json \
          --header "Content-Type: application/octet-stream" \
          --data-binary @en_US.json
        ```
        Calls to GET /files are used to monitor the language detection results. The API response will be augmented to include detected language and confidence score.

        The language detection will complete asynchronously. Prior to completion, the `detected_lang` value will be `zxx`, the reserved ISO 639-2 code for "No linguistic content/not applicable".

        If the language can not be determined, or the detection process fails, the `detected_lang` field will return `und`, the reserved ISO 639-2 code for undetermined language, and the `detected_lang_confidence` score will be `0`.

      operationId: uploadFile
      consumes:
        - application/octet-stream
      parameters:
        - description: A file name.
          in: query
          name: name
          required: true
          type: string
        - description: A hash value to associate with the file. The MD5 hash of the body contents will be used by default if a value isn't provided.
          in: query
          name: file_hash
          required: false
          type: string
        - description: Flag indicating whether to perform language detection on the uploaded file. Default is false.
          in: query
          name: langId
          required: false
          type: boolean
        - description: The project to associate the uploaded file with.
          in: query
          name: project_id
          required: false
          type: integer
        - description: The category of the file. The options are `REFERENCE`, or `API`. The default is API. Files with the `REFERENCE` category will be displayed as reference material.
          in: query
          name: category
          required: false
          type: string
        - description: Comma-separated list of labels to add to the uploaded document.
          in: query
          name: labels
          required: false
          type: string
        - in: body
          name: body
          description: The file contents to be uploaded. The entire POST body will be treated as the file.
          required: true
          schema:
            title: FileUploadBody
            type: string
            format: binary
            example: |-
              <?xml version="1.0" encoding="UTF-8" standalone="no"?>
              <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2">
              ...
              </xliff>
      responses:
        "201":
          description: A SourceFile object.
          schema:
            $ref: "#/definitions/SourceFile"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Upload a File
      tags:
        - Files
    delete:
      description: |+
        Delete a File.

        Example CURL command:
        ```
          curl -X DELETE https://lilt.com/2/files?key=API_KEY&id=123 ```

      operationId: deleteFile
      parameters:
        - description: A unique File identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "204":
          description: A status object.
          schema:
            title: FileDeleteResponse
            type: object
            properties:
              id:
                description: A unique File identifier.
                type: integer
                example: 12345
              deleted:
                description: "If the operation succeeded, then `true`. Otherwise, `false`."
                type: boolean
                example: true
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete a File
      tags:
        - Files
  /files/download:
    get:
      description: |+
        Download a File.

        Example CURL:
        ```
        curl --X --request GET 'https://lilt.com/2/files/download?key=API_KEY&id=1'
        ```
      operationId: download
      parameters:
        - description: A File id.
          in: query
          name: id
          required: true
          type: string
      produces:
        - application/octet-stream
      responses:
        "200":
          description: A file.
          schema:
            title: DocumentDownloadResponse
            type: string
            format: byte
      summary: Download file
      tags:
        - Files
  /files/labels:
    post:
      description: |+
        Add a label to a File.

        Example CURL:
        ```
        curl --X --request POST 'https://lilt.com/2/files/labels?key=API_KEY&id=1'
        --header 'Content-Type: application/json' \
        --data-raw '{
            "name": "label_name"
        }'
        ```
      operationId: addLabel
      parameters:
        - description: A File id.
          in: query
          name: id
          required: true
          type: string
        - description: A label name.
          in: body
          name: name
          required: true
          schema:
            title: AddFileLabelRequest
            type: object
            properties:
              name:
                description: The Label name.
                type: string
                example: label_name
      responses:
        "204":
          description: A success response.
      summary: Add Label to File
      tags:
        - Files
    delete:
      description: |+
        Remove a label from a File.

        Example CURL:
        ```
        curl --X --request DELETE 'https://lilt.com/2/files/labels?key=API_KEY&id=1&name=label_name'
        ```
      operationId: removeLabel
      parameters:
        - description: A File id.
          in: query
          name: id
          required: true
          type: string
        - description: A label name.
          in: query
          name: name
          required: true
          type: string
      responses:
        "204":
          description: A success response.
      summary: Remove Label from File
      tags:
        - Files
  /comments:
    get:
      description: |+
        Retrieves all comments associated with a specified document, grouped by their Segment's ID.

        To retrieve a document's comments, specify the <strong>document_id</strong> request parameter.

        Example CURL command:
        ```
          curl -X GET https://lilt.com/2/comments?key=API_KEY&document_id=123
        ```
      operationId: getDocumentComments
      parameters:
        - description: A unique document identifier.
          in: query
          name: document_id
          required: true
          type: integer
      responses:
        "200":
          description: An object containing lists of comments identified by the id of the segment to which they belong.
          schema:
            $ref: "#/definitions/DocumentComments"
        "403":
          description: User does not have permission for provided document.
        "410":
          description: Comment deleted.
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve a document's comments by segment
      tags:
        - Comments
    post:
      description: |-
        Create a new comment for the specified Segment ID.
      operationId: createComment
      consumes:
        - application/json
      parameters:
        - description: A unique document identifier.
          in: query
          name: document_id
          required: true
          type: integer
        - description: A unique segment identifier.
          in: query
          name: segment_id
          required: true
          type: integer
        - in: body
          name: body
          description: The comment being created
          required: true
          schema:
            $ref: "#/definitions/CommentBody"
      responses:
        "201":
          description: A Comment object.
          schema:
            $ref: "#/definitions/Comment"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Create a new comment
      tags:
        - Comments
    put:
      description: |-
        Update an existing comment.
      operationId: updateComment
      consumes:
        - application/json
      parameters:
        - description: A unique comment identifier.
          in: query
          name: comment_id
          required: true
          type: integer
        - description: A unique document identifier.
          in: query
          name: document_id
          required: true
          type: integer
        - in: body
          name: body
          description: The comment being updated.
          required: true
          schema:
            $ref: "#/definitions/CommentBody"
      responses:
        "201":
          description: A Comment object.
          schema:
            $ref: "#/definitions/Comment"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Update an existing comment
      tags:
        - Comments
    delete:
      description: |+
        Delete a Comment.

        Example CURL command:
        ```
          curl -X DELETE https://lilt.com/2/comments?key=API_KEY&comment_id=123
        ```
      operationId: deleteComment
      parameters:
        - description: A unique Comment identifier.
          in: query
          name: comment_id
          required: true
          type: integer
      responses:
        "204":
          description: A status object.
          schema:
            title: CommentDeleteResponse
            type: object
            properties:
              id:
                description: A unique Comment identifier.
                type: integer
                example: 12345
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete a Comment
      tags:
        - Comments
  /connectors:
    get:
      description: |-
        Retrieves one or more connectors available to your user. Connectors are not associated with a project or a memory.

        To retrieve a specific connector, specify the <strong>id</strong> request parameter. To retrieve all connectors, omit the <strong>id</strong> request parameter.

        Example CURL command:
        ```
         curl -X GET https://lilt.com/2/connectors?key=API_KEY&id=274```
      operationId: getConnectors
      parameters:
        - description: A unique Connector identifier.
          in: query
          name: id
          required: false
          type: integer
      responses:
        "200":
          description: A list of Connectors.
          schema:
            title: ConnectorsList
            type: array
            items:
              $ref: "#/definitions/Connector"
        "403":
          description: User does not have permission for provided connector.
        "410":
          description: Connector deleted.
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve a Connector
      tags:
        - Connectors
    post:
      description: |+
        Create a new connector linked to a supported external cms.
      operationId: createConnector
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: Connector arguments.
          required: true
          schema:
            title: connector
            type: object
            properties:
              name:
                description: Name of connector.
                type: string
              args:
                description: Connector parameters.
                type: object
              schedule:
                description: Cron string
                type: string
                example: "0 0 * * *"
      responses:
        "201":
          description: A Connector object.
          schema:
            $ref: "#/definitions/Connector"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Upload a Connector
      tags:
        - Connectors
    put:
      description: |+
        Create a new connector linked to a supported external content source.
      operationId: updateConnector
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: Connector arguments.
          required: true
          schema:
            title: ConnectorArguments
            type: object
            properties:
              id:
                description: A unique Connector identifier.
                type: integer
                example: 46530
              name:
                description: Name of connector.
                type: string
                example: "zendesk"
              args:
                description: Connector parameters.
                type: object
              schedule:
                description: Cron string
                type: string
                example: "0 0 * * *"
      responses:
        "201":
          description: A Connector object.
          schema:
            $ref: "#/definitions/Connector"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Upload a Connector
      tags:
        - Connectors
    delete:
      description: |+
        Delete a Connector.

        Example CURL command:
        ```
          curl -X DELETE https://lilt.com/2/connectors?key=API_KEY&id=123 ```

      operationId: deleteConnector
      parameters:
        - description: A unique Connector identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "204":
          description: A status object.
          schema:
            title: ConnectorDeleteResponse
            type: object
            properties:
              id:
                description: A unique Connector identifier.
                type: integer
                example: 12345
              deleted:
                description: "If the operation succeeded, then `true`. Otherwise, `false`."
                type: boolean
                example: true
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete a Connector
      tags:
        - Connectors
  /connectors/sync:
    post:
      description: |+
        Request an import job for the given connector ID. This will check the
        target system for new content to pull into Lilt.

        Example CURL command:
        ```
         curl -X GET https://lilt.com/2/connectors/sync?key=API_KEY&id=128
        ```
      operationId: syncConnector
      parameters:
        - description: A unique Connector identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "201":
          description: A Connector Job object.
          schema:
            $ref: "#/definitions/ConnectorJob"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Sync a Connector
      tags:
        - Connectors
  /connectors/jobs:
    get:
      description: |+
        Retrieves a connector job available to your user. Use this to check the
        status of jobs started by the `/connectors/sync` and
        `/connectors/jobs/deliver` endpoints.

        Example CURL command:
        ```
         curl -X GET https://lilt.com/2/connectors/jobs?key=API_KEY&id=9274
        ```
      operationId: getConnectorJobs
      parameters:
        - description: A unique Connector Job identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "200":
          description: A list of Connector Jobs.
          schema:
            title: ConnectorJobsList
            type: array
            items:
              $ref: "#/definitions/ConnectorJob"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve a Connector Job
      tags:
        - Connectors
  /connectors/jobs/deliver:
    post:
      description: |+
        Request an export job for the given connector job ID. This will check
        Lilt for completed projects that are associated with this job and
        deliver them to the target system.

        Example CURL command:
        ```
         curl -X POST https://lilt.com/2/connectors/jobs/deliver?key=API_KEY&id=9274
        ```
      operationId: exportConnectorJob
      parameters:
        - description: A unique Connector Job identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "200":
          description: A success status code.
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Deliver a Connector Job
      tags:
        - Connectors
  /configs/converter:
    get:
      description: |
        List all file filter configurations for your Organization.
      operationId: getConverterConfigs
      parameters:
        - description: A unique Organization identifier.
          in: query
          name: organizationId
          required: true
          type: integer
      responses:
        "200":
          description: A map of config id to string escaped config json.
          schema:
            $ref: "#/definitions/ConverterConfigMap"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: List Converter Configs
      tags:
        - ConverterConfig
    put:
      description: |
        Add a file filter configuration for your Organization.
      operationId: addConverterConfig
      consumes:
        - application/json
      parameters:
        - description: A unique Organization identifier.
          in: query
          name: organizationId
          required: true
          type: integer
        - in: body
          name: body
          description: The file filter configuration to create.
          schema:
            title: CreateConverterConfigParameters
            type: object
            properties:
              configJson:
                description: The configuration json blob, string escaped.
                type: string
                example: "{\"registry\": {\".md\": {\"type\": \"OkapiFprm\", \"version\": 1, \"filterName\": \"okf_markdown\", \"filterConfig\": \"#v1\\nuseCodeFinder.b=false\\ntranslateUrls.b=true\\nurlToTranslatePattern=.+\\ntranslateCodeBlocks.b=false\\ntranslateInlineCodeBlocks.b=true\\ntranslateHeaderMetadata.b=true\\ntranslateImageAltText.b=true\\nuseLinkSubflow.b=true\\ncodeFinderRules.count.i=1\\ncodeFinderRules.rule0=\\\\{\\\\{[^}]+\\\\}\\\\}\\ncodeFinderRules.sample={{#test}} handle bar test {{/test}}$0a${{stand-alone handle bar}}$0a$\\ncodeFinderRules.useAllRulesWhenTesting.b=true\\n\", \"extractAllTags\": true, \"exportReplacements\": {\"patterns\": [], \"replacements\": []}, \"importReplacements\": {\"patterns\": [], \"replacements\": []}}}"
              configName:
                description: The user defined name of your configuration.
                type: string
                example: "my_config"
              configDescription:
                description: A description for the configuration.
                type: string
                example: "config for custom markdown escaping"
            required:
              - configJson
              - configName
              - configDescription
      responses:
        "200":
          description: The config id of the configuration created.
          schema:
            title: ConverterConfigUpdateResponse
            type: object
            properties:
              configId:
                type: integer
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Add Converter Config
      tags:
        - ConverterConfig
  /configs/converter/{configId}:
    get:
      description: |
        Fetch a file filter configuration by id.
      operationId: getConverterConfigById
      parameters:
        - description: A unique configuration identifier.
          in: path
          name: configId
          required: true
          type: integer
      responses:
        "200":
          description: A map of config id to string escaped config json.
          schema:
            $ref: "#/definitions/ConverterConfigMap"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Fetch Converter Config by Id
      tags:
        - ConverterConfig
    delete:
      description: |
        Delete a file filter configuration by id.
      operationId: deleteConverterConfig
      parameters:
        - description: A unique configuration identifier.
          in: path
          name: configId
          required: true
          type: integer
      responses:
        "200":
          description: The config id of the configuration deleted.
          schema:
            type: object
            properties:
              configId:
                type: integer
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete Converter Config
      tags:
        - ConverterConfig
  /configs/converter/{configId}/{fileExtension}:
    put:
      description: |
        Add a specific filter mapping to your file filter configuration
      operationId: editFilterMapping
      consumes:
        - application/json
      parameters:
        - description: A unique configuration identifier.
          in: path
          name: configId
          required: true
          type: integer
        - description: A file extension for the filter mapping.
          in: path
          name: fileExtension
          required: true
          type: string
        - in: body
          name: body
          description: The file filter mapping to create.
          schema:
            title: EditFilterMappingParameters
            type: object
            properties:
              registryEntryJson:
                description: The filter mapping json blob, string escaped.
                type: string
                example: "{\"type\": \"OkapiFprm\", \"version\": 1, \"filterName\": \"okf_markdown\", \"filterConfig\": \"#v1\\nuseCodeFinder.b=false\\ntranslateUrls.b=true\\nurlToTranslatePattern=.+\\ntranslateCodeBlocks.b=false\\ntranslateInlineCodeBlocks.b=true\\ntranslateHeaderMetadata.b=true\\ntranslateImageAltText.b=true\\nuseLinkSubflow.b=true\\ncodeFinderRules.count.i=1\\ncodeFinderRules.rule0=\\\\{\\\\{[^}]+\\\\}\\\\}\\ncodeFinderRules.sample={{#test}} handle bar test {{/test}}$0a${{stand-alone handle bar}}$0a$\\ncodeFinderRules.useAllRulesWhenTesting.b=true\\n\", \"extractAllTags\": true, \"exportReplacements\": {\"patterns\": [], \"replacements\": []}, \"importReplacements\": {\"patterns\": [], \"replacements\": []}"
              configName:
                description: The user defined name of your configuration.
                type: string
                example: "my_config"
              configDescription:
                description: A description for the configuration.
                type: string
                example: "config for custom markdown escaping"
            required:
              - configJson
              - configName
              - configDescription
      responses:
        "200":
          description: A map of config id to string escaped config json.
          schema:
            $ref: "#/definitions/ConverterConfigMap"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Add Filter Mapping
      tags:
        - ConverterConfig
    delete:
      description: |
        Delete a file filter mapping by id and file extension.
      operationId: deleteFilterMapping
      parameters:
        - description: A unique configuration identifier.
          in: path
          name: configId
          required: true
          type: integer
        - description: A file extension to delete.
          in: path
          name: fileExtension
          required: true
          type: string
      responses:
        "200":
          description: A map of config id to string escaped config json.
          schema:
            $ref: "#/definitions/ConverterConfigMap"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete Filter Mapping
      tags:
        - ConverterConfig
  /documents:
    post:
      description: |
        Create a new Document. A Document is a collection of one or more Segments.
        Documents are nested inside of Projects, and appear in the Project details view in the web app.
        Document-level relationships between Segments are considered by the machine translation system during adaptation. If there is no inherent document structure in your data, you still might consider grouping related Segments into Documents to improve translation quality.
      operationId: createDocument
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The Document resource to create.
          schema:
            title: DocumentParameters
            type: object
            properties:
              name:
                description: The document name.
                type: string
                example: Introduction.xliff
              project_id:
                description: A unique Project identifier.
                type: integer
                example: 23618
            required:
              - name
              - project_id
      responses:
        "200":
          description: A Document object.
          schema:
            $ref: "#/definitions/DocumentWithSegments"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Create a Document
      tags:
        - Documents
    get:
      description: |-
        List a Document.

        The listing will include the pretranslation status for the document. When pretranslation is in progress for a document, the `GET /documents` endpoint's response will include `is_pretranslating = true` as well as a more detailed status property `status.pretranslation` one of `idle`, `pending`, or `running`.
      operationId: getDocument
      parameters:
        - description: A unique Document identifier.
          in: query
          name: id
          required: true
          type: integer
        - description: Flag indicating whether full segment information should be returned.
          in: query
          name: with_segments
          required: false
          type: boolean
      responses:
        "200":
          description: A Document object.
          schema:
            $ref: "#/definitions/DocumentWithSegments"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve a Document
      tags:
        - Documents
    put:
      - summary: Update a Document
        tags:
          - Documents
        description: |
          Update a Document.
        operationId: updateDocument
        consumes:
          - application/json
        parameters:
          - in: body
            name: body
            description: The Document resource to update.
            required: true
            schema:
              title: DocumentUpdateParameters
              type: object
              properties:
                id:
                  description: A unique Document identifier.
                  type: integer
                  example: 46530
                name:
                  description: The Document name.
                  type: string
                  example: Introduction to our App
              required:
                - id
                - name
        responses:
          "200":
            description: A Document object.
            schema:
              $ref: "#/definitions/DocumentWithSegments"
          "400":
            description: Invalid id or name or one of them was missing.
            schema:
              $ref: "#/definitions/Error"
          default:
            description: Unexpected error
            schema:
              $ref: "#/definitions/Error"
      - summary: Update multiple Documents
        tags:
          - Documents
        description: |
          Update multiple Documents.
        operationId: updateDocuments
        consumes:
          - application/json
        parameters:
          - in: body
            name: body
            description: An array of Document resources to update.
            required: true
            schema:
              title: Multiple DocumentUpdateParameters
              type: array
              items:
                type: object
                properties:
                  id:
                    description: A unique Document identifier.
                    type: integer
                    example: 46530
                  name:
                    description: The Document name.
                    type: string
                    example: Introduction to our App
                required:
                  - id
                  - name
        responses:
          "200":
            description: Multiple Document objects.
            schema:
              type: array
              items:
                $ref: "#/definitions/DocumentWithSegments"
          "400":
            description: Invalid id or name or one of them was missing.
            schema:
              type: array
              items:
                $ref: "#/definitions/Error"
          default:
            description: Unexpected error
            schema:
              $ref: "#/definitions/Error"
    delete:
      description: |
        Delete a Document.
      operationId: deleteDocument
      parameters:
        - description: A unique Document identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "200":
          description: A status object.
          schema:
            title: DocumentDeleteResponse
            type: object
            properties:
              id:
                description: A unique Document identifier.
                type: integer
                example: 46530
              deleted:
                description: "If the operation succeeded, then `true`. Otherwise, `false`."
                type: boolean
                example: true
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete a Document
      tags:
        - Documents
  /documents/share:
    put:
      description: |+
        Assign and unassign a Document for translation and/or review.

      operationId: assignDocument
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Attributes of the Document resource to assign.
          required: true
          schema:
            title: DocumentAssignmentParameters
            type: object
            properties:
              id:
                description: A unique Document identifier.
                type: integer
                example: 46530
              email:
                description: An email address.
                type: string
                example: user@email.com
              is_translator:
                description: "If true, assign for translating. If false, then unassign."
                type: boolean
                example: true
              is_reviewer:
                description: "If true, assign for reviewing. If false, then unassign."
                type: boolean
                example: false
              due_date:
                description: "Due date for translation or review (set based on `is_translator` and `is_reviewer` flags)."
                type: string
                format: date-time
                example: 2019-10-16T22:12:34.000Z
            required:
              - id
              - email
      responses:
        "200":
          description: A status object.
          schema:
            title: DocumentAssignmentResponse
            type: object
            properties:
              id:
                description: A unique Document identifier.
                type: integer
                example: 46530
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Assign a Document
      tags:
        - Documents
  /documents/pretranslate:
    post:
      description: |
        Initiate pretranslation of a list of Documents. This request will mark
        document(s) as being pretranslated. Pretranslation in this context is:
        - Applying and confirming exact TM matches based on the Memory of the
        Project;
        - Translating all other segments via MT without confirming
        them.

        Example CURL command:
        ```
        curl -X POST https://lilt.com/2/documents/pretranslate?key=API_KEY -d '{"id": [123]}' -H "Content-Type: application/json"
        ```

        Document translation is an asynchronous process that, in effect, is
        performed in the background.

        To check the status of pretranslation for a document, use the `GET
        /documents` endpoint. When pretranslation is in progress for a document,
        the `GET /documents` endpoint's response will include `is_pretranslating
        = true` as well as a more detailed status property
        `status.pretranslation` one of `idle`, `pending`, or `running`.

        Once pretranslation is finished, the document can be downloaded via `GET
        /documents/files`.
      operationId: pretranslateDocuments
      consumes:
        - application/json
      parameters:
        - in: query
          description: Deprecated, use body param instead. Optional parameter for auto-accepting 100% TM hits.
          name: auto_accept
          required: false
          type: boolean
        - in: query
          description: Deprecated, use body param instead. Optional for using case matching against TM hits.
          name: case_sensitive
          required: false
          type: boolean
        - in: query
          description: Deprecated, use body param instead. Optional parameter for attributing translation authorship of exact matches to document creator.
          name: attribute_to_creator
          required: false
          type: boolean
        - in: query
          description: |+
            Deprecated, use body param instead. An optional parameter indicating how the document will be pretranslated.

            The accepted values are `tm`, or `tm+mt`. Default is `tm`.
          name: mode
          required: false
          type: string
        - in: body
          name: body
          description: A list of unique Document identifiers.
          required: true
          schema:
            title: DocumentPretranslateParameters
            type: object
            properties:
              id:
                description: A list of unique Document identifiers.
                type: array
                items:
                  type: integer
                example:
                  - 123
                  - 234
              auto_accept:
                description: Optional parameter for auto-accepting 100% TM hits.
                type: boolean
                example: false
              case_sensitive:
                description: Optional for using case matching against TM hits..
                type: boolean
                example: false
              attribute_to_creator:
                description: Optional parameter for attributing translation authorship of exact matches to document creator.
                type: boolean
                example: false
              mode:
                description: |+
                  An optional parameter indicating how the document will be pretranslated.

                  The accepted values are `tm`, or `tm+mt`. Default is `tm`.
                type: string
                example: "tm+mt"
            required:
              - id
      responses:
        "202":
          description: A status object.
          schema:
            title: DocumentPretranslateResponse
            type: object
            properties:
              id:
                description: A list of documents being pretranslated.
                type: array
                items:
                  type: integer
                example:
                  - 123
                  - 234
              is_pretranslating:
                description: "If the operation succeeded, then `true`. Otherwise, `false`."
                type: boolean
                example: true
              documents:
                description: Document pretranslation status.
                type: array
                items:
                  $ref: "#/definitions/DocumentPretranslating"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Pretranslate a Document
      tags:
        - Documents
  /documents/files:
    get:
      description: |+
        Export a Document that has been translated in the Lilt web application.
        Any Document can be downloaded in XLIFF 1.2 format, or can be retrieved in its original uploaded format by setting `is_xliff=false`.
        This endpoint will fail if either (a) export or (b) pre-translation operations are in-progress. The status of those operations can be determined by retrieving the Document resource.
        Example CURL command:
        ```
          curl -X GET https://lilt.com/2/documents/files?key=API_KEY&id=274 -o from_lilt.xliff
        ```

      operationId: downloadDocument
      parameters:
        - description: An unique Document identifier.
          in: query
          name: id
          required: true
          type: integer
        - description: Download the document in XLIFF 1.2 format.
          in: query
          name: is_xliff
          required: false
          type: boolean
          default: true
      produces:
        - application/octet-stream
      responses:
        "200":
          description: A file.
          schema:
            title: DocumentDownloadResponse
            type: string
            format: byte
        "502":
          description: File in pretranslation.
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Download a Document
      tags:
        - Documents
    post:
      description: |+
        Create a Document from a file in any of the formats [documented in our knowledge base](https://support.lilt.com/hc/en-us/articles/360020816253-File-Formats).
        Request parameters should be passed as JSON object with the header field `LILT-API`.

        File names in the header can only contain [US-ASCII characters](https://en.wikipedia.org/wiki/ASCII). File names with characters outside of US-ASCII should be [URI encoded](https://en.wikipedia.org/wiki/Percent-encoding) or transliterated to US-ASCII strings.

        Example CURL command:
        ```
          curl -X POST https://lilt.com/2/documents/files?key=API_KEY \
          --header "LILT-API: {\"name\": \"introduction.xliff\",\"pretranslate\": \"tm+mt\",\"project_id\": 9}" \
          --header "Content-Type: application/octet-stream" \
          --data-binary @Introduction.xliff
        ```

      operationId: uploadDocument
      consumes:
        - application/octet-stream
      parameters:
        - description: A file name.
          in: header
          name: name
          required: true
          type: string
        - description: A unique Project identifier.
          in: header
          name: project_id
          required: true
          type: integer
        - in: header
          name: pretranslate
          description: |+
            An optional parameter indicating if and how the document will be
            pretranslated upon being uploaded.
            The accepted values are `TM`, or `TM+MT`
          required: false
          type: string
        - in: header
          description: |+
            An optional parameter to auto-accept segments with 100% translation
            memory matches when the `pretranslate` option is also set, or to
            auto-accept any target data that is present when the uploaded file
            is XLIFF. If omitted it will default to your organization settings for `Accept and lock exact matches`,
            if set to `false`, no segments will be auto-accepted.
          name: auto_accept
          required: false
          type: boolean
        - in: header
          description: |+
            An optional parameter to use case sensitive translation memory matching when the `pretranslate`
            option is also enabled. Matches must have identical character-by-character case to qualify as matches.
            Default value matches your organization settings for `Use case sensitive translation memory matching` setting
          name: case_sensitive
          required: false
          type: boolean
        - in: header
          description: |+
            An optional parameter to attribute translation authorship of exact matches to the author of the file
            when the `pretranslate` option is also enabled. Default value matches your organization settings for `Translation authorship` setting
          name: match_attribution
          required: false
          type: boolean
        - in: header
          description: |+
            An optional pararameter to specify an import configuration to
            be applied when extracting translatable content from this file.
          name: config_id
          required: false
          type: integer
        - in: body
          name: body
          description: |+
            The file contents to be uploaded. The entire POST body will be
            treated as the file.
          required: true
          schema:
            title: DocumentUploadBody
            type: string
            format: binary
            example: |-
              <?xml version="1.0" encoding="UTF-8" standalone="no"?>
              <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2">
              ...
              </xliff>
      responses:
        "200":
          description: A Document object.
          schema:
            $ref: "#/definitions/DocumentWithSegments"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Upload a File
      tags:
        - Documents
  /documents/done/unlock:
    post:
      description: |+
        Unlock documents for translation.
        Sets document "Translation Done" and "Review Done" to false.

        Example curl:
        ```
          curl --X --request POST 'https://lilt.com/2/documents/done/unlock?key=API_KEY' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "documentIds": [23921, 23922]
          }'
        ```
      parameters:
        - in: body
          name: body
          description: document ids to update
          required: true
          schema:
            title: DocumentDoneUpdateParameters
            type: object
            properties:
              documentIds:
                description: array of document ids
                type: array
                items:
                  type: number
                example: [10641, 10642]
            required:
              - documentIds
      summary: Unlock documents
      operationId: unlockDocuments
      tags:
        - Documents
      responses:
        "200":
          description: array of updated documents
          schema:
            title: "DocumentDoneResponse"
            type: array
            items:
              type: number
  /documents/done/translation:
    post:
      description: |+
        Mark the translation of documents as done/undone in bulk.

        When being marked positively as done:

        - Documents must not already be marked as done and all segments must be confirmed.
        - This request will also trigger an email notification to a document's assigned reviewer that the document is ready for review.

        When being marked as un-done:
        - Documents must not be marked as complete for review.

        Example curl:
        ```
          curl --X --request POST 'https://lilt.com/2/documents/done/translation?key=API_KEY' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "documentIds": [23921, 23922],
              "isDone": true
          }'
        ```
      parameters:
        - in: body
          name: body
          description: document ids to update
          required: true
          schema:
            title: DocumentDoneUpdateParameters
            type: object
            properties:
              documentIds:
                description: array of document ids
                type: array
                items:
                  type: number
                example: [10641, 10642]
              isDone:
                type: boolean
                example: true
            required:
              - documentIds
              - isDone
      operationId: markTranslationDone
      summary: Mark translation done
      tags:
        - Documents
      responses:
        "200":
          description: array of updated documents
          schema:
            title: "DocumentDoneResponse"
            type: array
            items:
              type: number
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/TranslateCompletionTypeError"
  /documents/done/review:
    post:
      description: |+
        Mark the review of documents as done/undone in bulk.

        When being marked positively as done:

        - Documents must not already be marked as done for review.
        - Documents must already be marked as done for translation.
        - This request will also trigger an email notification.

        Example curl:
        ```
          curl --X --request POST 'https://lilt.com/2/documents/done/review?key=API_KEY' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "documentIds": [23921, 23922],
              "isDone": true
          }'
        ```
      parameters:
        - in: body
          name: body
          description: document ids to update
          required: true
          schema:
            title: DocumentDoneUpdateParameters
            type: object
            properties:
              documentIds:
                description: array of document ids
                type: array
                items:
                  type: number
                example: [10641, 10642]
              isDone:
                type: boolean
                example: true
            required:
              - documentIds
              - isDone
      operationId: markReviewDone
      summary: Mark review done
      tags:
        - Documents
      responses:
        "200":
          description: array of updated documents
          schema:
            title: "DocumentDoneResponse"
            type: array
            items:
              type: number
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/ReviewCompletionTypeError"
  /languages:
    get:
      description: |+
        Get a list of supported languages.

      operationId: getLanguages
      responses:
        "200":
          description: An object listing supported languages and their corresponding locales.
          schema:
            title: LanguagesResponse
            type: object
            properties:
              source_to_target:
                description: "A two-dimensional object in which the first key is an ISO 639-1 language code indicating the source, and the second key is an ISO 639-1 language code indicating the target."
                type: object
                example:
                  en:
                    da: true
                    de: true
                    fr: true
                    ...: ...
                  ...: ...
              code_to_name:
                description: "An object in which the key is an ISO 639-1 language code, and the value is the language name."
                type: object
                example:
                  aa: Afar
                  ab: Abkhazian
                  af: Afrikaans
                  ...: ...
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve supported languages
      tags:
        - Languages
  /lexicon:
    post:
      description: |+
        Update the Lexicon (Termbase as displayed in the ui) with a new term. The maximum source length is 250
        characters.

      operationId: updateLexicon
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The lexicon entry.
          required: true
          schema:
            title: LexiconUpdateParameters
            type: object
            properties:
              memory_id:
                description: A unique Memory identifier.
                type: integer
                example: 10641
              source:
                description: The source side of the lexicon entry.
                type: string
                example: washing machine
              target:
                description: The target side of the lexicon entry.
                type: string
                example: Waschmaschine
            required:
              - memory_id
              - source
              - target
      responses:
        "200":
          description: A status object.
          schema:
            title: LexiconUpdateResponse
            type: object
            properties:
              memory_id:
                description: A unique Memory identifier.
                type: integer
                example: 46530
              success:
                description: "If the operation succeeded, then `true`. Otherwise, `false`."
                type: boolean
                example: true
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Update a Lexicon
      tags:
        - Lexicon
    get:
      description: |+
        Query the Lexicon. The Lexicon is an editable termbase / concordance that is integrated with the Memory.

      operationId: queryLexicon
      parameters:
        - description: A unique Memory identifier.
          in: query
          name: memory_id
          required: true
          type: integer
        - description: An ISO 639-1 language code.
          in: query
          name: srclang
          required: true
          type: string
        - description: An ISO 639-1 language code.
          in: query
          name: trglang
          required: true
          type: string
        - description: The query term.
          in: query
          name: query
          required: true
          type: string
        - description: The maximum number of results to return.
          in: query
          name: "n"
          default: 1
          required: false
          type: integer
      responses:
        "200":
          description: A list of LexiconEntry objects.
          schema:
            title: LexiconQueryResponse
            type: array
            items:
              $ref: "#/definitions/LexiconEntry"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Query a Lexicon
      tags:
        - Lexicon
  /memories:
    post:
      description: |+
        Create a new Memory. A Memory is a container that collects source/target
        sentences for a specific language pair (e.g., English>French). The data
        in the Memory is used to train the MT system, populate the TM, and
        update the lexicon. Memories are private to your account - the data is
        not shared across users - unless you explicitly share a Memory with your
        team (via web app only).

        <a href="https://support.lilt.com/hc/en-us/sections/360012579193-Lilt-Translate-Engine" target=_blank>Refer
        to our KB</a> for a more detailed description.

      operationId: createMemory
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The Memory resource to create.
          required: true
          schema:
            title: MemoryCreateParameters
            type: object
            properties:
              name:
                description: A name for the Memory.
                type: string
                example: automotive
              srclang:
                description: An ISO 639-1 language identifier.
                type: string
                example: en
              trglang:
                description: An ISO 639-1 language identifier.
                type: string
                example: fr
              srclocale:
                description: An ISO 3166-1 region name for language locales
                type: string
                example: US
              trglocale:
                description: An ISO 3166-1 region name for language locales
                type: string
                example: FR
            required:
              - srclang
              - trglang
              - name
      responses:
        "200":
          description: A Memory object.
          schema:
            $ref: "#/definitions/Memory"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Create a Memory
      tags:
        - Memories
    get:
      description: |+
        Retrieve a Memory. If you cannot access the Memory (401 error) please check permissions (e.g. in case you created the Memory via the web app with a different account you may have to explicitly share that Memory).

      operationId: getMemory
      parameters:
        - description: An optional Memory identifier.
          in: query
          name: id
          required: false
          type: integer
      responses:
        "200":
          description: A list of Memory objects.
          schema:
            title: MemoryResponse
            type: array
            items:
              $ref: "#/definitions/Memory"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve a Memory
      tags:
        - Memories
    put:
      description: |
        Update a Memory.
      operationId: updateMemory
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The Memory resource to update.
          required: true
          schema:
            title: MemoryUpdateParameters
            type: object
            properties:
              id:
                description: A unique Memory identifier.
                type: integer
                example: 7246
              name:
                description: The Memory name.
                type: string
                example: Automotive Memory
            required:
              - id
              - name
      responses:
        "200":
          description: A Memory object.
          schema:
            $ref: "#/definitions/Memory"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Update the name of a Memory
      tags:
        - Memories
    delete:
      description: |
        Delete a Memory.
      operationId: deleteMemory
      parameters:
        - description: A unique Memory identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "200":
          description: A status object.
          schema:
            title: MemoryDeleteResponse
            type: object
            properties:
              id:
                description: A unique Memory identifier.
                type: integer
                example: 46530
              deleted:
                description: "If the operation succeeded, then `true`. Otherwise, `false`."
                type: boolean
                example: true
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete a Memory
      tags:
        - Memories
  /memories/query:
    get:
      description: |+
        Perform a translation memory query.

      operationId: queryMemory
      parameters:
        - description: A unique Memory identifier.
          in: query
          name: id
          required: true
          type: integer
        - description: A source query.
          in: query
          name: query
          required: true
          type: string
        - description: Maximum number of results to return.
          in: query
          name: "n"
          required: false
          type: integer
          default: 10
      responses:
        "200":
          description: A list of TranslationMemoryEntry objects.
          schema:
            title: MemoryQueryResponse
            type: array
            items:
              $ref: "#/definitions/TranslationMemoryEntry"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Query a Memory
      tags:
        - Memories
  /memories/sync:
    get:
      description: |+
        Get all or part of a memory in TMX 1.4b format. If the `from_time` and/or `to_time` are omitted, then all segments are returned. The parameter `when` specifies on which date field `from_time` and `to_time` are matched. Possible values are `created` (when the segment was originally created in the memory), `updated` (when the segment was lastly updated), and `deleted` (when the segment was deleted).

        Example CURL command:
        ```
          curl -X GET https://lilt.com/2/memories/sync?key=API_KEY&id=42 -o from_lilt.tmx
        ```

      operationId: syncDownMemory
      parameters:
        - description: A unique Memory identifier.
          in: query
          name: id
          required: true
          type: integer
        - description: "Unix time stamp (epoch, in seconds) of the start of the Memory section."
          in: query
          name: from_time
          required: false
          type: integer
        - description: "Unix time stamp (epoch, in seconds) of the end of the Memory section."
          in: query
          name: to_time
          required: false
          type: integer
        - description: "The date field on which retrieved segments match from/to time stamps: `created`, `updated`, `deleted`. If this parameter is omitted, then the whole Memory is returned."
          in: query
          name: when
          required: false
          type: string
      produces:
        - application/x-tmx
      responses:
        "200":
          description: A TMX 1.4b file.
          schema:
            title: MemorySyncResponse
            type: string
            format: byte
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Get-sync for a Memory
      tags:
        - Memories
    post:
      description: |+
        Inserts a TM in TMX 1.4b format into the Memory. Request parameters should be passed as JSON object with the header field `LILT-API`.

        Example CURL command:
        ```
          curl -X POST https://lilt.com/2/memories/sync?key=API_KEY \
            --header "LILT-API: {\"name\": \"my_memory.tmx\",\"id\": 42}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @my_memory.tmx
        ```

      operationId: syncInsertMemory
      consumes:
        - application/octet-stream
      parameters:
        - description: A unique Memory identifier.
          in: header
          name: id
          required: true
          type: integer
        - description: Name of the TMX file.
          in: header
          name: name
          required: false
          type: string
        - in: body
          name: body
          description: The file contents to be uploaded. The entire POST body will be treated as the file.
          required: true
          schema:
            title: MemoryInsertBody
            type: string
      responses:
        "200":
          description: A status object.
          schema:
            title: MemoryInsertResponse
            type: object
            properties:
              id:
                description: A unique Memory identifier.
                type: integer
                example: 123
              num_updates:
                description: The number of updates to the Memory.
                type: integer
                example: 107
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Insert-sync for a Memory
      tags:
        - Memories
    put:
      description: |+
        Updates the Memory with given TMX file. Request parameters should be passed as JSON object with the header field `LILT-API`. The number of segments returned by the `from_time`, `to_time`, `when` parameters and the number of segments in the TMX file need to be identical.

        Example CURL command:
        ```
          curl -X PUT https://lilt.com/2/memories/sync?key=API_KEY \
            --header "LILT-API: {\"name\": \"my_memory.tmx\", \"id\": 42, \"from_time\": 1491048000, \"to_time\": 1491049800, "when": "Updated"}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @my_memory.tmx
        ```

      operationId: syncUpdateMemory
      parameters:
        - description: A unique Memory identifier.
          in: header
          name: id
          required: true
          type: integer
        - description: "Unix time stamp (epoch, in seconds) of the start of the Memory section."
          in: header
          name: from_time
          required: false
          type: integer
        - description: "Unix time stamp (epoch, in seconds) of the end of the Memory section."
          in: header
          name: to_time
          required: false
          type: integer
        - description: "The date field on which retrieved segments match from/to time stamps: `created`, `updated`, `deleted`."
          in: header
          name: when
          required: false
          type: string
        - in: body
          name: body
          description: The file contents to be uploaded. The entire PUT body will be treated as the file.
          required: true
          schema:
            title: MemoryUpdateBody
            type: string
      responses:
        "200":
          description: A status object.
          schema:
            title: MemoryUpdateResponse
            type: object
            properties:
              id:
                description: A unique Memory identifier.
                type: integer
                example: 123
              num_updates:
                description: The number of updates to the Memory.
                type: integer
                example: num_updates
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Update-sync for a Memory
      tags:
        - Memories
    delete:
      description: |+
        Deletes segments in the Memory matching the `from_time`, `to_time` and `when` parameters.

        Example CURL command:
        ```
          curl -X DELETE https://lilt.com/2/memories/sync?key=API_KEY&id=42&from_time=1491048000&to_time=1491049800&when=created
        ```

      operationId: syncDeleteMemory
      parameters:
        - description: A unique Memory identifier.
          in: query
          name: id
          required: true
          type: integer
        - description: "Unix time stamp (epoch, in seconds) of the start of the Memory section."
          in: query
          name: from_time
          required: false
          type: integer
        - description: "Unix time stamp (epoch, in seconds) of the end of the Memory section."
          in: query
          name: to_time
          required: false
          type: integer
        - description: "The date field on which retrieved segments match from/to time stamps: `created`, `updated`, `deleted`."
          in: query
          name: when
          required: false
          type: string
      responses:
        "200":
          description: A status object.
          schema:
            title: MemorySyncDeleteResponse
            type: object
            properties:
              id:
                description: A unique Memory identifier.
                type: integer
                example: 123
              num_updates:
                description: The number of updates to the Memory.
                type: integer
                example: 107
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete-sync for a Memory
      tags:
        - Memories
  /memories/import:
    post:
      description: |+
        Imports common translation memory or termbase file formats to a specific Lilt memory. Currently supported file formats are `*.tmx`, `*.sdltm`, `*.sdlxliff`(With custom Filters), '*.xliff', and `*.tmq` for TM data; `*.csv` and `*.tbx` for termbase data. Request parameters should be passed as JSON object with the header field `LILT-API`.

        Example CURL command to upload a translation memory file named `my_memory.sdltm` in the current working directory:
        ```
          curl -X POST https://lilt.com/2/memories/import?key=API_KEY \
            --header "LILT-API: {\"name\": \"my_memory.sdltm\",\"memory_id\": 42}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @my_memory.sdltm
        ```

        Example CURL command to upload a translation memory file named `my_memory.sdlxliff` in the current working directory, with Custom Filters based on SDLXLIFF fields, conf_name which maps to, percentage, and whether we should ignore unlocked segments.
        ```
          curl -X POST https://lilt.com/2/memories/import?key=API_KEY \
            --header "LILT-API: {\"name\": \"my_memory.sdlxliff\",\"memory_id\": 12,\"sdlxliff_filters\":[{\"conf_name\": \"Translated\", \"percentage\": 100, \"allow_unlocked\": false}]"}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @my_memory.sdlxliff


      operationId: importMemoryFile
      consumes:
        - application/octet-stream
      parameters:
        - description: A unique Memory identifier.
          in: header
          name: memory_id
          required: true
          type: integer
        - description: Name of the TM or termbase file.
          in: header
          name: name
          required: true
          type: string
        - description: Contains Filter information Unique to SDLXLIFF
          in: header
          name: sdlxliff_filters
          required: false
          type: array
          items:
            $ref: '#/definitions/SDLXLIFFFilter'
        - description: A flag indicating whether an imported Termbase CSV has a header row or not (the default value is `false`).
          in: header
          name: has_header_row
          required: false
          type: boolean
        - description: |
            A flag indicating whether or not to skip the import of segments
            which already exist in the memory. (the default value is `false`).
          in: header
          name: skip_duplicates
          required: false
          type: boolean
        - in: body
          name: body
          description: The file contents to be uploaded. The entire POST body will be treated as the file.
          required: true
          schema:
            title: MemoryImportBody
            type: string
            format: binary
      responses:
        "200":
          description: A status object.
          schema:
            title: MemoryImportResponse
            type: object
            properties:
              id:
                description: A unique Memory identifier.
                type: integer
                example: 123
              isProcessing:
                description: The current state of the import.
                type: integer
                example: 1
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: File import for a Memory
      tags:
        - Memories
  /memories/termbase/export:
    post:
      description: |+
        Exports the termbase entries for the given memory into a CSV file.

        Calling this endpoint will begin the export process in the background.
        Check that the processing is complete by polling the `GET /2/memories`
        endpoint. When the `is_processing` value is 0 then call the
        `POST /2/memories/termbase/download` endpoint.

        ```
          curl -X POST https://lilt.com/2/memories/termbase/export?key=API_KEY&id=ID
        ```
      operationId: exportTermbase
      parameters:
        - description: A unique Memory identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "200":
          description: A status object.
          schema:
            title: TermbaseExportResponse
            type: object
            properties:
              id:
                description: A unique Memory identifier.
                type: integer
                example: 123
              is_processing:
                description: The current state of the import.
                type: integer
                example: 1
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Termbase export for a Memory
      tags:
        - Memories
  /memories/termbase/download:
    get:
      description: |+
        Downloads the termbase export for the given memory as a CSV file.

        Ensure you first call the `/2/memories/termbase/export` endpoint to
        start the export process before you try to download it.

        ```
          curl -X GET https://lilt.com/2/memories/termbase/download?key=API_KEY&id=ID
        ```
      operationId: downloadTermbase
      parameters:
        - description: A unique Memory identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "200":
          description: A file.
          schema:
            title: TermbaseDownloadResponse
            type: string
            format: byte
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Termbase download for a Memory
      tags:
        - Memories
  /memories/segment:
    delete:
      description: |+
        Delete a segment from a memory.

        ```
          curl -X DELETE https://lilt.com/2/memories/segment?key=API_KEY&id=ID&segment_id=$SEGMENT_ID
        ```
      operationId: deleteSegmentFromMemory
      parameters:
        - description: A unique Memory identifier.
          in: query
          name: id
          required: true
          type: integer
        - description: A unique Segment identifier.
          in: query
          name: segment_id
          required: true
          type: integer
      responses:
        "200":
          description: A success resposne.
          schema:
            title: DeleteSegmentFromMemoryResponse
            type: object
            properties:
              success:
                type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete a segment from a memory.
      tags:
        - Memories
  /jobs:
    post:
      description: |+
        Create a Job. A Job is a collection of Projects.
        A Job will contain multiple projects, based on the language pair.
        A Project is associated with exactly one Memory.

        Jobs appear in the Jobs dashboard of the web app.

        Example CURL command:

        ```
        curl -X POST 'https://lilt.com/2/jobs?key=API_KEY' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "name": "test job",
          "fileIds": [5009, 5010, 5011],
          "due": "2022-05-05T10:56:44.985Z",
          "srcLang": "en",
          "srcLocale": "US",
          "languagePairs": [
              { "memoryId": 3121, "trgLang": "de" },
              { "memoryId": 2508, "trgLang": "fr" },
              { "memoryId": 3037, "trgLang": "zh" }
            ]
        }'
        ```

      operationId: createJob
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The Job resource to create.
          required: true
          schema:
            title: JobCreateParameters
            type: object
            properties:
              name:
                description: A name for the Job.
                type: string
                example: My new Job
              languagePairs:
                description: Language pairs is a set of one or more pairs that includes source language, source locale(optional), target language, target locale(optional), and memoryId.
                type: array
                items:
                  $ref: "#/definitions/LanguagePair"
              fileIds:
                description: A list of file ids to upload to job creation.
                type: array
                items:
                  type: integer
                example: [298, 299]
              due:
                description: An ISO string date representing job due date.
                type: string
                example: "2021-10-05T14:48:00.000Z"
              srcLang:
                description: 2-letter ISO source language code
                type: string
                example: "en"
              srcLocale:
                description: 2-letter source language code
                type: string
                example: "US"
              isPlural:
                description: A boolean value representing if the files have plurals.
                type: boolean
                example: true
              workflowTemplateId:
                description: Identifier of the workflow template to be used when creating a job. If not passed the organization default will be used.
                type: integer
                example: 123
              workflowTemplateName:
                description: Name of the workflow template to be used, must be passed with teamId or look up will fail. If workflowTemplateId is passed it supercedes any other look up.
                type: integer
                example: "Translate > Review"
            required:
              - name
              - languagePairs
              - fileIds
              - srcLang
              - srcLocale
      responses:
        "200":
          description: A Job object.
          schema:
            $ref: "#/definitions/Job"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Create a Job
      tags:
        - Jobs
    get:
      description: |-
        Get all Jobs within a given offset and limit. You can retrieve jobs from your account using the above API.

        Example CURL command:

        ```
        curl -X GET 'https://lilt.com/2/jobs?key=API_KEY&isArchived=false'
        ```
      operationId: retrieveAllJobs
      consumes:
        - application/json
      parameters:
        - in: query
          description: Retrieves all jobs that are archived.
          name: isArchived
          type: boolean
        - in: query
          description: Retrieves all jobs that are delivered.
          name: isDelivered
          type: boolean
        - in: query
          description: Return jobs starting at the offset row. If not given the default offset will be 0.
          name: offset
          type: integer
          minimum: 0
        - in: query
          description: The maximum number of jobs to be returned. If not given the default limit will be 25.
          name: limit
          type: integer
          maximum: 50
      responses:
        "200":
          description: A list of Job objects.
          schema:
            title: JobsResponse
            type: array
            items:
              $ref: "#/definitions/Job"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve all Jobs
      tags:
        - Jobs
  /jobs/{jobId}:
    get:
      description: |-
        Retrieves a job data along with stats. To retrieve a specific job, you will need the job `id` in the url path.

        Example CURL command:

        ```
        curl -X GET 'https://lilt.com/2/jobs/{id}?key=API_KEY'
        ```
      operationId: getJob
      parameters:
        - in: path
          description: A job id.
          name: jobId
          required: true
          type: integer
      responses:
        "200":
          description: A job object.
          schema:
            $ref: "#/definitions/Job"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve a Job
      tags:
        - Jobs
    put:
      description: |-
        Updates a job with the new job properties. To update a specific job, you will need the job `id` in the url path.

        You can update job's name and due date by passing the property and new value in the body.

        Example CURL command:

        ```
        curl -X PUT 'https://lilt.com/2/jobs/{id}?key=API_KEY' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "name": "test job",
          "due": "2022-05-05T10:56:44.985Z"
        }'
        ```

      operationId: updateJob
      parameters:
        - in: path
          description: A job id.
          name: jobId
          required: true
          type: integer
        - in: body
          name: body
          description: The Job resource to update.
          schema:
            title: JobUpdateParameters
            type: object
            properties:
              name:
                description: A name for the Job.
                type: string
                example: My new Job
              dueDate:
                description: An ISO string date.
                type: integer
                example: "2021-10-05T14:48:00.000Z"
              isProcessing:
                description: |
                  The processing status of the job. Provide one of the following
                  integers to indicate the status.

                  Ok = 0
                  Started = 1
                  ExportError = -2
                type: string
                enum:
                  - 0
                  - 1
                  - -2
                example: "ExportError"
              processingErrorMsg:
                description: The processing error message.
                type: string
                example: Authentication failed. Check your Contentful API Key.
      responses:
        "200":
          description: A job object.
          schema:
            $ref: "#/definitions/Job"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Update a Job
      tags:
        - Jobs
    delete:
      description: |-
        Delete a job, deletes all projects and documents in the job, deletes all the segments from all the job's translation memories.

        Example CURL command:

        ```
        curl -X DELETE 'https://lilt.com/2/jobs/{id}?key=API_KEY'
        ```

      operationId: deleteJob
      parameters:
        - in: path
          description: A job id.
          name: jobId
          required: true
          type: integer
      responses:
        "200":
          description: A status object.
          schema:
            title: JobDeleteResponse
            type: object
            properties:
              id:
                description: A unique Project identifier.
                type: integer
                example: 241
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete a Job
      tags:
        - Jobs
  /jobs/{jobId}/stats:
    post:
      description: |-
        Get the TM leverage stats for the job (new/exact/fuzzy matches).

        Example CURL command:

        ```
        curl -X POST 'https://lilt.com/2/jobs/{id}/stats?key=API_KEY'
        ```

      operationId: getJobLeverageStats
      parameters:
        - in: path
          description: A job id.
          name: jobId
          required: true
          type: integer
      responses:
        "200":
          description: A job leverage stats object.
          schema:
            $ref: "#/definitions/JobLeverageStats"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve Job Leverage Stats
      tags:
        - Jobs
  /jobs/{jobId}/archive:
    post:
      description: |-
        Set job to archived, unassign all linguists and archive all projects and documents inside the job.

        It will return the archived job.

        Example CURL command:

        ```
        curl -X POST 'https://lilt.com/2/jobs/{id}/archive?key=API_KEY'
        ```

      operationId: archiveJob
      parameters:
        - in: path
          description: A job id.
          name: jobId
          required: true
          type: integer
      responses:
        "200":
          description: A job object.
          schema:
            $ref: "#/definitions/Job"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Archive a Job
      tags:
        - Jobs
  /jobs/{jobId}/unarchive:
    post:
      description: |-
        Set job to unarchived, the job will move to active status.

        Example CURL command:

        ```
        curl -X POST 'https://lilt.com/2/jobs/{id}/unarchive?key=API_KEY'
        ```

      operationId: unarchiveJob
      parameters:
        - in: path
          description: A job id.
          name: jobId
          required: true
          type: integer
      responses:
        "200":
          description: A job object.
          schema:
            $ref: "#/definitions/Job"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Unarchive a Job
      tags:
        - Jobs
  /jobs/{jobId}/deliver:
    post:
      description: |-
        Set the job state to delivered and set all the projects in the job to done

        It will return the delivered job.

        Example CURL command:

        ```
        curl -X POST 'https://lilt.com/2/jobs/{id}/deliver?key=API_KEY'
        ```

      operationId: deliverJob
      parameters:
        - in: path
          description: A job id.
          name: jobId
          required: true
          type: integer
      responses:
        "200":
          description: A job object.
          schema:
            $ref: "#/definitions/Job"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Deliver a Job
      tags:
        - Jobs
  /jobs/{jobId}/reactivate:
    post:
      description: |-
        Set the job state to active. Does not change the state of projects associated with the given job.

        It will return the reactivated job.

        Example CURL command:

        ```
        curl -X POST 'https://lilt.com/2/jobs/{id}/reactivate?key=API_KEY'
        ```

      operationId: reactivateJob
      parameters:
        - in: path
          description: A job id.
          name: jobId
          required: true
          type: integer
      responses:
        "200":
          description: A job object.
          schema:
            $ref: "#/definitions/Job"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Reactivate a Job
      tags:
        - Jobs
  /jobs/{jobId}/export:
    get:
      description: |-
        Prepare job files for download.
        To export translated documents from the job use the query parameter `type=files`:

        Example CURL command:

        ```
        curl -X GET 'https://lilt.com/2/jobs/{id}/export?key=API_KEY&type=files'
        ```

        To export job memories use the query parameter `type=memory`.

        The status of the export can be checked by requesting the job `GET /jobs/:jobId`, `job.isProcessing` will be `1` while in progress,
        `0` when idle and `-2` when the export failed.

      operationId: exportJob
      parameters:
        - in: path
          description: A job id.
          name: jobId
          required: true
          type: integer
        - in: query
          description: category for files and memory.
          name: type
          required: true
          type: string
      responses:
        "200":
          description: 200 status.
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Export a Job
      tags:
        - Jobs
  /jobs/{jobId}/downlod:
    get:
      description: |-
        Make sure you have exported a job with the same id before using this api.

        Downloading files requires the exported job `id` in the param.

        Example CURL command:

        ```
        curl -X GET 'https://lilt.com/2/jobs/{id}/download?key=API_KEY'
        ```
      operationId: downloadJob
      parameters:
        - in: path
          description: A job id.
          name: jobId
          required: true
          type: integer
      responses:
        "200":
          description: zipped file
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Download a Job
      tags:
        - Jobs
  /projects:
    post:
      description: |+
        Create a Project. A Project is a collection of Documents.

        A Project is associated with exactly one Memory.

        Projects appear in the dashboard of the web app.

      operationId: createProject
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The Project resource to create.
          required: true
          schema:
            title: ProjectCreateParameters
            type: object
            properties:
              name:
                description: A name for the Project.
                type: string
                example: My new project
              memory_id:
                description: The Memory to associate with this new Project.
                type: integer
                example: 1234
              job_id:
                description: |
                  The Job to associate with this new Project. If a Job ID is not
                  provided then a new Job will be created to contain the
                  Project.
                type: integer
                example: 1234
              due_date:
                description: The due date. Measured in seconds since the Unix epoch.
                type: integer
                example: 1489147692
              metadata:
                description: A JSON object of key/value string pairs. Stores custom project information.
                type: object
                example:
                  connectorType: github
                  notes: example metadata
              workflowTemplateId:
                type: integer
                example: 14
                description: The workflow template used to create this project. WorkflowTemplateIds can be retrieved via the /workflows/templates endpoint. If not specified then the organization default workflowTemplateId will be used.
              workflow_template_name:
                type: string
                example: neural
                description: The LLM provider to use for this project. If not specified then the "neural" LLM provider will be used.
              llm_provider:
                type: string
                example: neural
                description: The LLM provider to use for this project. If not specified then the "neural" LLM provider will be used.
              external_model_id:
                type: integer
                example: 123
                description: The external model id to use for project creation. The model provider needs to match the llm_provider that has been set.
              is_plural:
                type: boolean
                example: false
                description: If true then documents in this project contain ICU plural forms. If false, ICU plural forms will not be parsed. Defaults to false.
            required:
              - memory_id
              - name
      responses:
        "200":
          description: A Project object.
          schema:
            $ref: "#/definitions/Project"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Create a Project
      tags:
        - Projects
    get:
      description: |-
        Retrieves one or more projects, including the documents associated with each project. Retrieving a project is the most efficient way to retrieve a single project, multiple projects or a list of all available projects.

        To retrieve a specific project, specify the `id` request parameter or you can retrieve multiple projects by adding comma (,) between ids eg. `?id=1234,5678`. To retrieve all projects, omit the `id` request parameter. To limit the retrieved projects to those with a particular source language or target language, specify the corresponding ISO 639-1 language codes in the `srclang` and `trglang` request parameters, respectively.
      operationId: getProjects
      parameters:
        - description: A unique Project identifier. It can be a single id or multiple ids separated by a comma
          in: query
          name: id
          required: false
          type: integer
        - description: An ISO 639-1 language code.
          in: query
          name: srclang
          required: false
          type: string
        - description: An ISO 639-1 language code.
          in: query
          name: trglang
          required: false
          type: string
        - description: "Unix time stamp (epoch, in seconds) of Projects with `created_at` greater than or equal to the value."
          in: query
          name: from_time
          required: false
          type: integer
        - description: "Unix time stamp (epoch, in seconds) of Projects with `created_at` less than the value."
          in: query
          name: to_time
          required: false
          type: integer
        - description: A project state (backlog, inProgress, inReview, inQA, done).
          in: query
          name: state
          required: false
          type: string
        - description: A flag that toggles whether to include archived projects in the response (the default is `true`).
          in: query
          name: archived
          required: false
          type: boolean
        - description: A unique Connector identifier.
          in: query
          name: connector_id
          required: false
          type: integer
      responses:
        "200":
          description: A list of Project objects.
          schema:
            title: ProjectResponse
            type: array
            items:
              $ref: "#/definitions/Project"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve a Project
      tags:
        - Projects
    put:
      - summary: Update a Project
        description: |
          Update a Project.
        operationId: updateProject
        consumes:
          - application/json
        parameters:
          - in: body
            name: body
            description: The Project resource to update.
            required: true
            schema:
              title: ProjectUpdateResponse
              type: object
              properties:
                id:
                  description: A unique Project identifier.
                  type: integer
                  example: 1234
                name:
                  description: The Project name.
                  type: string
                  example: Walker Percy Essays
                state:
                  description: "The project's state. The possible states are 'backlog', 'inProgress', 'inReview', 'inQA', and 'done'"
                  type: string
                  example: backlog
                due_date:
                  description: The due date. Measured in seconds since the Unix epoch.
                  type: integer
                  example: 1489147692
                archived:
                  description: "True if the project is archived. Otherwise, false."
                  type: boolean
                  example: false
                metadata:
                  description: Metadata associated with a project. This field must be valid JSON.
                  type: object
                  example:
                    connectorType: github
                    notes: example metadata
                sample_review_percentage:
                  description: "The Project's sample review percentage. Must be an integer between 10 and 100, a multiple of 10 and greater than minimum value (displayed in error message)."
                  type: integer
                  example: 20
              required:
                - id
        responses:
          "200":
            description: A Project object.
            schema:
              $ref: "#/definitions/Project"
          default:
            description: Unexpected error
            schema:
              $ref: "#/definitions/Error"
        tags:
          - Projects
      - summary: Update multiple Projects
        description: |
          Update multiple Projects.
        operationId: updateProjects
        consumes:
          - application/json
        parameters:
          - in: body
            name: body
            description: The Project resources to update.
            required: true
            schema:
              type: array
              items:
                title: ProjectUpdateResponse
                type: object
                properties:
                  id:
                    description: A unique Project identifier.
                    type: integer
                    example: 1234
                  name:
                    description: The Project name.
                    type: string
                    example: Walker Percy Essays
                  state:
                    description: "The project's state. The possible states are 'backlog', 'inProgress', 'inReview', 'inQA', and 'done'"
                    type: string
                    example: backlog
                  due_date:
                    description: The due date. Measured in seconds since the Unix epoch.
                    type: integer
                    example: 1489147692
                  archived:
                    description: "True if the project is archived. Otherwise, false."
                    type: boolean
                    example: false
                  metadata:
                    description: Metadata associated with a project. This field must be valid JSON.
                    type: object
                    example:
                      connectorType: github
                      notes: example metadata
                  sample_review_percentage:
                    description: "The Project's sample review percentage. Must be an integer between 10 and 100, a multiple of 10 and greater than minimum value (displayed in error message)."
                    type: integer
                    example: 20
                required:
                  - id
        responses:
          "200":
            description: The updated Project objects.
            schema:
              type: array
              items:
                $ref: "#/definitions/Project"
          default:
            description: Unexpected error
            schema:
              $ref: "#/definitions/Error"
        tags:
          - Projects
    delete:
      description: |
        Delete a Project.
      operationId: deleteProject
      parameters:
        - description: A unique Project identifier.
          in: query
          name: id
          required: false
          type: integer
      responses:
        "200":
          description: A status object.
          schema:
            title: ProjectDeleteResponse
            type: object
            properties:
              id:
                description: A unique Project identifier.
                type: integer
                example: 46530
              deleted:
                description: "If the operation succeeded, then `true`. Otherwise, `false`."
                type: boolean
                example: true
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete a Project
      tags:
        - Projects
  /projects/bulk-update:
    put:
      summary: Update multiple Projects with a single payload
      description: |
        Update multiple Projects with a single payload.
      operationId: updateProjectsBulk
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The Project resources to update.
          required: true
          schema:
            type: object
            title: Projects to update
            required:
              - projectIds
              - project
            properties:
              projectIds:
                type: array
                items:
                  description: A unique Project identifier.
                  type: integer
                  example: 1234
              project:
                title: ProjectUpdateResponse
                type: object
                properties:
                  name:
                    description: The Project name.
                    type: string
                    example: Walker Percy Essays
                  state:
                    description: "The project's state. The possible states are 'backlog', 'inProgress', 'inReview', 'inQA', and 'done'"
                    type: string
                    example: backlog
                  due_date:
                    description: The due date. Measured in seconds since the Unix epoch.
                    type: integer
                    example: 1489147692
                  archived:
                    description: "True if the project is archived. Otherwise, false."
                    type: boolean
                    example: false
                  metadata:
                    description: Metadata associated with a project. This field must be valid JSON.
                    type: object
                    example:
                      connectorType: github
                      notes: example metadata
                  sample_review_percentage:
                    description: "The Project's sample review percentage. Must be an integer between 10 and 100, a multiple of 10 and greater than minimum value (displayed in error message)."
                    type: integer
                    example: 20
      responses:
        "200":
          description: The updated Project objects.
          schema:
            type: array
            items:
              $ref: "#/definitions/Project"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      tags:
        - Projects
  /projects/bulk-deliver:
    post:
      summary: Deliver multiple projects apart from their jobs.
      description: |
        Deliver mulitple projects apart from their jobs.
      operationId: deliverProjectsBulk
      consumes:
        - application/json
      parameters:
        - in: query
          name: workflowEnabled
          description: Whether the project has or not workflows enabled. (not used)
          type: boolean
          required: false
        - in: body
          name: body
          description: The Project resources to update.
          required: true
          schema:
            type: object
            title: Projects to deliver
            required:
              - projectIds
            properties:
              projectIds:
                type: array
                items:
                  description: A unique Project identifier.
                  type: integer
                  example: 1234
      responses:
        "200":
          description: Empty response if succeed.
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      tags:
        - Projects
  /projects/quote:
    get:
      description: |+
        Get information about a project that can be used for quoting. This includes:
        * A translation memory leverage report
        * Word count
        * Segment count

      operationId: getProjectReport
      parameters:
        - description: A unique Project identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "200":
          description: An object that represents a Project quote.
          schema:
            $ref: "#/definitions/ProjectQuote"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve Project report
      tags:
        - Projects
  /projects/{id}/revision:
    get:
      description: |+
        Get information about a project's revision report. This includes:
        * Stats on accepted segments
        * reviewer details
        * Error rate

      operationId: getProjectRevisionReport
      parameters:
        - description: A unique Project identifier.
          in: path
          name: id
          required: true
          type: integer
      responses:
        "200":
          description: A csv file containing revision report.
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve Project revision report
      tags:
        - Projects
  /projects/status:
    get:
      description: |+
        Retrieve the status of a Project.

      operationId: getProjectStatus
      parameters:
        - description: A unique Project identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "200":
          description: An object that represents a Project status report.
          schema:
            $ref: "#/definitions/ProjectStatus"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve Project status
      tags:
        - Projects
  /autoAssignment:
    post:
      tags:
        - Projects
      summary: Auto Assignment
      description: |+
        Trigger automatic assignment of linguists.

        Requires auto-assignment to be enabled as a setting on the origanization level.
      operationId: triggerAutoAssignment
      consumes:
        - application/json
      parameters:
        - description: |
            The comma separated list of project ids to auto-assign.
            Can be sent in the body as an alternative but if both are specified the query has precedence.
          in: query
          name: projectIds
          required: true
          type: string
        - in: body
          name: body
          description: |
            An array of project ids to auto-assign. (optional)
            If projectIds is specified in the querystring it will have precedence.
          required: false
          schema:
            title: AutoAssignmentParameters
            type: object
            properties:
              projectIds:
                type: array
                items:
                  type: integer
            required:
              - projectIds
      responses:
        "200":
          description: An auto assignment response.
          schema:
            type: array
            items:
              $ref: "#/definitions/AutoAssignmentResponse"
        "400":
          description: Bad request. Possible causes include no permission to the projects and the auto-assignment setting not being enabled.
          schema:
            $ref: "#/definitions/BadRequest"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /qa:
    get:
      description: |
        Perform QA checks on a target string. Optionally, you can specify a source string for additional bilingual checks, e.g. number consistency.
      operationId: qaCheck
      parameters:
        - description: A target string to be checked.
          in: query
          name: target
          required: true
          type: string
        - description: An ISO 639-1 language code.
          in: query
          name: trglang
          required: true
          type: string
        - description: An optional source string.
          in: query
          name: source
          required: false
          type: string
        - description: An ISO 639-1 language code.
          in: query
          name: srclang
          required: false
          type: string
        - description: |+
            Any custom rules defined for this Memory will also be applied as part
            of the QA check.
          in: query
          name: memory_id
          required: false
          type: integer
      responses:
        "200":
          description: A QARuleMatches object.
          schema:
            $ref: "#/definitions/QARuleMatches"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Perform QA check
      tags:
        - QA
  /segments:
    post:
      description: |+
        Create a Segment and add it to a Memory or a Document. A Segment is a source/target
        pair that is used to train the machine translation system and populate
        the translation memory.

        The maximum source length is 5,000 characters.

      operationId: createSegment
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: |
            The Segment resource to create.

            To add a Segment to a Memory, include the `memory_id` and `target` parameters.

            To add a Segment to a Document, include the `document_id` and the `source` parameters.
            The `target` parameter is optional.
          required: true
          schema:
            title: SegmentCreateParameters
            type: object
            properties:
              memory_id:
                description: A unique Memory identifier.
                type: integer
                example: 10641
              document_id:
                description: A unique Document identifier.
                type: integer
                example: 1876
              source:
                description: The source string.
                type: string
                example: Code zur Fehleranalyse einschalten
              target:
                description: The target string.
                type: string
                example: Enable debugging code
              shouldApplySegmentation:
                description: A flag for whether this segment should be broken down into smaller segments. If this is true then the response is an array of segments.
                type: boolean
              srcLang:
                description: A two letter language code for the source language. Required if `shouldApplySegmentation` is enabled.
                type: string
                example: fr
            required:
              - source
      responses:
        "200":
          description: A Segment object.
          schema:
            $ref: "#/definitions/Segment"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Create a Segment
      tags:
        - Segments
    get:
      description: |+
        Retrieve a Segment.

      operationId: getSegment
      parameters:
        - description: A unique Segment identifier.
          in: query
          name: id
          required: true
          type: integer
        - description: Include comments in the response.
          in: query
          name: include_comments
          default: false
          required: false
          type: boolean
      responses:
        "200":
          description: A Segment object.
          schema:
            $ref: "#/definitions/SegmentWithComments"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve a Segment
      tags:
        - Segments
    put:
      description: |+
        Update a Segment in memory. The Memory will be updated with the new target string.

      operationId: updateSegment
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The Segment resource to update.
          required: true
          schema:
            title: SegmentUpdateParameters
            type: object
            properties:
              id:
                description: A unique Segment identifier.
                type: integer
                example: 84480010
              target:
                description: The target string.
                type: string
                example: Enable debug code
            required:
              - id
              - target
      responses:
        "200":
          description: A Segment object.
          schema:
            $ref: "#/definitions/Segment"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Update a Segment
      tags:
        - Segments
    delete:
      description: |
        Delete a Segment from memory. This will not delete a segment from a document.
      operationId: deleteSegment
      parameters:
        - description: A unique Segment identifier.
          in: query
          name: id
          required: true
          type: integer
      responses:
        "200":
          description: A status object.
          schema:
            title: SegmentDeleteResponse
            type: object
            properties:
              id:
                description: A unique Segment identifier.
                type: integer
                example: 46530
              deleted:
                description: "If the operation succeeded, then `true`. Otherwise, `false`."
                type: boolean
                example: true
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete a Segment
      tags:
        - Segments
  /segments/review/unlock:
    post:
      description: |+
        Unaccept and unlock segments.
        Sets individual segments' "Review Done" to false. Confirmed segments will remain confirmed.

        Example curl:
        ```
          curl --X --request POST 'https://lilt.com/2/segments/review/unlock?key=API_KEY' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "segmentIds": [23921, 23922]
          }'
        ```
      parameters:
        - in: body
          name: body
          description: segment ids to update
          required: true
          schema:
            title: SegmentDoneResponse
            type: object
            properties:
              documentIds:
                description: array of segment ids
                type: array
                example: [30032, 30125]
                items:
                  type: number
            required:
              - documentIds
      operationId: unlockSegments
      summary: Unaccept and unlock segments
      tags:
        - Segments
      responses:
        "200":
          description: array of updated segments
          schema:
            title: "SegmentDoneResponse"
            type: array
            items:
              type: number
  /segments/tag:
    get:
      description: |+
        Project tags for a segment. The `source_tagged` string contains one or more SGML
        tags. The `target` string is untagged. This endpoint will automatically place the
        source tags in the target.

        Usage charges apply to this endpoint for production REST API keys.

      operationId: tagSegment
      parameters:
        - description: The tagged source string.
          in: query
          name: source_tagged
          required: true
          type: string
        - description: The target string.
          in: query
          name: target
          required: true
          type: string
        - description: A unique Memory identifier.
          in: query
          name: memory_id
          required: true
          type: integer
      responses:
        "200":
          description: A TaggedSegment object.
          schema:
            $ref: "#/definitions/TaggedSegment"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Tag a Segment
      tags:
        - Segments
  /settings:
    post:
      operationId: upsertSetting
      description: |+
        Create or update the value for the given setting and setting scope.

        Example CURL to set an organization-level setting:

        ```
        curl --location --request POST 'https://lilt.com/2/settings?key=<API_KEY>' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "settingName": "requireBatchQaTranslator",
            "value": false,
            "organizationId": 285,
            "scope": "Organization"
        }'
        ```

      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/SettingUpsertBody"
      responses:
        "200":
          description: Updated settings object and updated active settings.
          schema:
            $ref: "#/definitions/SettingUpsertResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Update or create a setting
      tags:
        - Settings

  /settings/organization:
    get:
      description: |+
        Get the organization-level settings for the active users organization

        Example CURL:

        ```
        curl --location --request GET 'https://lilt.com/2/settings/organization?key=<API_KEY>' \
        ```

      operationId: getOrganizationSettings
      responses:
        "200":
          description: Organization settings dictionary.
          schema:
            $ref: "#/definitions/SettingDictionary"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Get organization-level settings
      tags:
        - Settings
  /settings/project/{projectId}:
    get:
      description: |+
        Get the settings as applied to a specific project.
        Active settings will combine project-level settings, organization-level settings and fallback to setting default values.

        Example CURL:

        ```
        curl --location --request GET 'https://lilt.com/2/settings/project/123?key=<API_KEY>' \
        ```

      operationId: getProjectSettings
      parameters:
        - in: path
          description: A project id.
          name: projectId
          required: true
          type: integer
      responses:
        "200":
          description: Project settings dictionary.
          schema:
            $ref: "#/definitions/SettingDictionary"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Get settings for a project
      tags:
        - Settings
  /settings/user:
    get:
      description: |+
        Get the active settings applied to the authenticated user.

        Example CURL:

        ```
        curl --location --request GET 'https://lilt.com/2/settings/user?key=<API_KEY>' \
        ```

      operationId: getUserSettings
      responses:
        "200":
          description: Settings dictionary.
          schema:
            $ref: "#/definitions/SettingDictionary"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Get settings for the authenticated  user
      tags:
        - Settings
  /translate:
    get:
      description: |+
        Translate a source string.

        Setting the `rich` parameter to `true` will change the response format
        to include additional information about each translation including a
        model score, word alignments,  and formatting information. The rich
        format can be seen in the example response on this page.

        By default, this endpoint also returns translation memory (TM) fuzzy matches, along
        with associated scores. Fuzzy matches always appear ahead of machine translation
        output in the response.

        The `source` parameter may be supplied in the query or in the request body.

        The maximum source length is 5,000 characters.

        Usage charges apply to this endpoint for production REST API keys.

      operationId: translateSegment
      parameters:
        - description: A unique Memory identifier.
          in: query
          name: memory_id
          required: true
          type: integer
        - description: The source text to be translated.
          in: query
          name: source
          required: false
          type: string
        - description: The source text to be translated.
          in: body
          name: body
          schema:
            title: TranslateSegmentBody
            type: object
            properties:
              source:
                description: A unique Segment identifier.
                type: string
        - description: A source hash code.
          in: query
          name: source_hash
          required: false
          type: integer
        - description: A target prefix.
          in: query
          name: prefix
          required: false
          type: string
        - description: Return top n translations (deprecated).
          in: query
          name: "n"
          required: false
          type: integer
          default: 1
        - description: "Returns rich translation information (e.g., with word alignments)."
          in: query
          name: rich
          default: false
          required: false
          type: boolean
        - description: Include translation memory fuzzy matches.
          in: query
          name: tm_matches
          default: true
          required: false
          type: boolean
        - description: Project tags. Projects tags in source to target if set to true.
          in: query
          name: project_tags
          default: false
          required: false
          type: boolean
        - description: Contains ICU data. If true then tags in the source following the ICU standard will be parsed and retained.
          in: query
          name: contains_icu_data
          default: false
          required: false
          type: boolean
      responses:
        "200":
          description: A TranslationList object.
          schema:
            $ref: "#/definitions/TranslationList"
        "202":
          description: When the ML model is loading.
          schema:
            $ref: "#/definitions/TranslationList"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Translate a segment
      deprecated: true
      tags:
        - Translate
    post:
      description: |+
        Translate a source string.

        Setting the `rich` parameter to `true` will change the response format
        to include additional information about each translation including a
        model score, word alignments,  and formatting information. The rich
        format can be seen in the example response on this page.

        By default, this endpoint also returns translation memory (TM) fuzzy matches, along
        with associated scores. Fuzzy matches always appear ahead of machine translation
        output in the response.

        The maximum source length is 5,000 characters.

        Usage charges apply to this endpoint for production REST API keys.

      operationId: translateSegmentPost
      parameters:
        - in: body
          name: body
          schema:
            title: TranslateSegmentBody
            type: object
            required:
              - memory_id
            properties:
              source:
                description: A unique Segment identifier.
                type: string
              memory_id:
                type: integer
                description: A unique Memory identifier.
              source_hash:
                type: integer
                description: A source hash code.
              n:
                type: integer
                default: 1
                description: Return top n translations (deprecated).
              prefix:
                type: string
                description: A target prefix
              rich:
                type: boolean
                default: false
                description: Returns rich translation information (e.g., with word alignments).
              tm_matches:
                type: boolean
                default: true
                description: Include translation memory fuzzy matches.
              project_tags:
                type: boolean
                default: false
                description: Project tags. Projects tags in source to target if set to true.
              containsICUData:
                type: boolean
                default: false
                description: Contains ICU data. If true then tags in the source following the ICU standard will be parsed and retained.
      responses:
        "200":
          description: A TranslationList object.
          schema:
            $ref: "#/definitions/TranslationList"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Translate a segment
      tags:
        - Translate

  /translate/register:
    get:
      description: |+
        Register a source string for interactive translation. The `source_hash` value that is returned by this request is required by the `prefix` parameter for the translation endpoint.
        The maximum source length is 5,000 characters.
        Usage charges apply to this endpoint for production REST API keys.

      operationId: registerSegment
      parameters:
        - description: A source string to be registered.
          in: query
          name: source
          required: true
          type: string
        - description: An ISO 639-1 language code.
          in: query
          name: srclang
          required: true
          type: string
        - description: An ISO 639-1 language code.
          in: query
          name: trglang
          required: true
          type: string
      responses:
        "200":
          description: A status object.
          schema:
            title: TranslateRegisterResponse
            type: object
            properties:
              source_hash:
                description: A unique source token required by the `prefix` parameter for translation requests.
                type: integer
                example: 11476
              num_words:
                description: The number of billed words in the segment.
                type: integer
                example: 88
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Register a segment
      tags:
        - Translate
  /translate/file:
    post:
      description: |+
        Start machine translation of one or more Files that have previously been uploaded.  The response will include an `id` parameter that can be used to monitor and download the translations in subsequent calls.

        Example CURL:
        ```
        curl --X --request POST 'https://lilt.com/2/translate/file?key=API_KEY&fileId=583&memoryId=2495&configId=123&withTM=true'
        ```

      operationId: batchTranslateFile
      parameters:
        - description: List of File ids to be translated, comma separated.
          in: query
          name: fileId
          required: true
          type: string
        - description: Id of Memory to use in translation.
          in: query
          name: memoryId
          required: true
          type: string
        - description: An optional pararameter to specify an import configuration to be applied when extracting translatable content from this file.
          in: query
          name: configId
          required: false
          type: number
        - description: An optional boolean parameter to toggle the use of Translation Memory in the translation of the file.
          in: query
          name: withTM
          required: false
          type: boolean
      responses:
        "200":
          description: Translation info
          schema:
            $ref: "#/definitions/TranslationInfo"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      summary: Translate a File
      tags:
        - Translate
    get:
      description: |+
        Get information about the one or more Files that are being translated with machine translation. Query filters are optional but at least one must be provided.

        Example CURL:
        ```
        curl --X --request GET 'https://lilt.com/2/translate/file?key=API_KEY&translationIds=1,2&fromTime=1607966744&toTime=1707966744&status=InProgress'
        ```

      operationId: monitorFileTranslation
      parameters:
        - description: List of translation ids, comma separated
          in: query
          name: translationIds
          required: false
          type: string
        - description: One of the translation statuses - `InProgress`, `Completed`, `Failed`, `ReadyForDownload`
          in: query
          name: status
          required: false
          type: string
        - description: Results after this time (inclusive) will be returned, specified as seconds since the Unix epoch.
          in: query
          name: fromTime
          required: false
          type: number
        - description: Results before this time (exclusive) will be returned, specified as seconds since the Unix epoch.
          in: query
          name: toTime
          required: false
          type: number
      responses:
        "200":
          description: Translation info
          schema:
            $ref: "#/definitions/TranslationInfo"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/MonitorFileTranslationTypeError"
      summary: Monitor file translation
      tags:
        - Translate
  /translate/files:
    get:
      description: |+
        Download a translated File.

        Example CURL:
        ```
        curl --X --request GET 'https://lilt.com/2/translate/files?key=API_KEY&id=1'
        ```

      operationId: downloadFile
      parameters:
        - description: A translation id.
          in: query
          name: id
          required: true
          type: string
      produces:
        - application/octet-stream
      responses:
        "200":
          description: A file.
          schema:
            title: DocumentDownloadResponse
            type: string
            format: byte
      summary: Download translated file
      tags:
        - Translate
  /workflows/templates:
    get:
      description: |+
        Get all the possible Workflow Templates owned by the team. Useful for retrieving the ids corresponding
        to each workflow tables, and passing them to subsequent requests, for example, creating a new Job with
        a specific Workflow.

        Example CURL:
        ```
        curl --X --request GET 'https://lilt.com/2/workflows/templates?key=API_KEY'
        ```

      operationId: getWorkflowTemplates
      produces:
        - application/json
      responses:
        "200":
          description: An array with a team's available WorkflowTemplates.
          schema:
            type: array
            items:
              $ref: "#/definitions/WorkflowTemplate"
      summary: Retrieve workflow templates
      tags:
        - Workflows
  /workflows/document/{documentId}:
    get:
      description: |+
        Get Workflow metadata related to a document. This is useful for gathering information about the current Workflow stage of a document.

        Example CURL:
        ```
        curl --X --request GET 'https://lilt.com/2/workflows/document/{documentId}?key=API_KEY'
        ```

      operationId: getDocumentWorkflow
      parameters:
        - in: path
          description: A document id.
          name: documentId
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: An object with document Workflow metadata.
          schema:
            $ref: "#/definitions/DocumentWorkflow"
      summary: Retrieve document Workflow metadata
      tags:
        - Workflows
  /workflows/{documentId}/stage:
    put:
      description: |+
        Set the Workflow stage for a document. You can find the stage information required for this request from the "Retrieve document Workflow metadata" endpoint.

        Example CURL:
        ```
        curl --X --request PUT 'https://lilt.com/2/workflows/document/{documentId}/stage?key=API_KEY' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "workflowStageId": {workflowStageId}
        }'
        ```

      operationId: setDocumentStage
      parameters:
        - in: path
          description: A document id.
          name: documentId
          required: true
          type: integer
        - in: body
          name: workflowStageId
          required: false
          schema:
            title: SetDocumentStageRequest
            type: object
            properties:
              workflowStageId:
                description: A workflow stage id. Can be found in "Retrieve document Workflow metadata" endpoint. To set the document stage to 'Done', pass through an empty request body.
                type: string
                example: 1234
      produces:
        - application/json
      responses:
        "200":
          description: An object with a documents next task Workflow metadata.
          schema:
            $ref: "#/definitions/NextWorkflowTask"
      summary: Set Workflow stage for a document
      tags:
        - Workflows
  /document/{documentId}/task/{taskId}/advance:
    post:
      description: |+
        Advance a workflow to the next stage and mark current workflow task as complete.

        Example CURL:
        ```
        curl --X --request POST 'https://lilt.com/2/workflows/document/{documentId}/task/{taskId}/advance?key=API_KEY'
        ```

      operationId: advanceWorkflowStage
      parameters:
        - in: path
          description: A document id.
          name: documentId
          required: true
          type: integer
        - in: path
          description: The task id of the current workflow stage.
          name: taskId
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: An object with a documents next task Workflow metadata.
          schema:
            $ref: "#/definitions/NextWorkflowTask"
      summary: Advance workflow to the next stage
      tags:
        - Workflows
  /document/{documentId}/task/{taskId}/reject:
    post:
      description: |+
        Move a workflow to the previous stage and mark current workflow task as rejected.

        Example CURL:
        ```
        curl --X --request POST 'https://lilt.com/2/workflows/document/{documentId}/task/{taskId}/reject?key=API_KEY'
        ```

      operationId: rejectWorkflowStage
      parameters:
        - in: path
          description: A document id.
          name: documentId
          required: true
          type: integer
        - in: path
          description: The task id of the current workflow stage.
          name: taskId
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: An object with a documents next task Workflow metadata.
          schema:
            $ref: "#/definitions/NextWorkflowTask"
      summary: Move workflow to the previous stage
      tags:
        - Workflows
  /create/terms-and-conditions:
    post:
      description: |+
        Lilt Create requires that the terms and conditions are signed first
        before using it. The terms and conditions can be signed by using this
        endpoint.

        Example CURL:
        ```
        curl --X --request POST 'https://lilt.com/2/create/terms-and-conditions?key=API_KEY' \
        --header 'Content-Type: application/json' \
        --data-raw '{"signedAgreement": true}'
        ```

      operationId: signLiltCreateTerms
      parameters:
        - in: body
          name: signedAgreement
          description: Whether or not to sign the agreement.
          required: true
          type: boolean
      produces:
        - application/json
      responses:
        "200":
          description: |
            An object indicating whether the agreement has been signed or not.
          schema:
            title: signLiltCreateTermsResponse
            type: object
            properties:
              signedAgreement:
                description: Whether or not the agreement has been signed.
                type: boolean
                example: true
      summary: Sign the Lilt Create terms and conditions
      tags:
        - Create
  /create:
    get:
      description: |+
        Get a list of all content that has been generated by Lilt Create.

        Example CURL:
        ```
        curl --X --request GET 'https://lilt.com/2/create?key=API_KEY'
        ```

      operationId: getLiltCreateContent
      produces:
        - application/json
      responses:
        "200":
          description: An object with a documents next task Workflow metadata.
          schema:
            type: array
            items:
              $ref: "#/definitions/LiltCreateContent"
      summary: Get Lilt Create content
      tags:
        - Create
    post:
      description: |+
        Generate new Lilt Create content with the given parameters.

        Example CURL:
        ```
        curl --X --request POST 'https://lilt.com/2/create?key=API_KEY' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "language":"en-US",
          "template":"blog-post",
          "templateParams":{
            "contentLength":"100",
            "language":"en-US",
            "sections":[],
            "summary":"a blog post about hiking"
            },
          "preferences":{"tone":"formal","styleguide":""}
        }'
        ```

      operationId: generateLiltCreateContent
      parameters:
        - in: body
          name: language
          description: The language to generate the content in.
          required: true
          type: string
        - in: body
          name: template
          description: |
            Which promt template to use. Use "blog-post" if you are unsure of
            what prompt template to use.
          required: true
          type: string
        - in: body
          name: preferences
          description: Preferences which dictate how the content is generated.
          required: true
          type: object
          properties:
            tone:
              type: string
              enum:
                - formal
                - casual
                - educational
                - humerous
              description: The tone of language to use. For example, "formal".
            styleguide:
              type: string
              description: The styleguide to use.
        - in: body
          name: templateParams
          description: |
            Input parameters that determine what content will be generated.
          required: true
          type: object
          properties:
            contentLength:
              type: string
              description: |
                A string representation of how many words the generated content
                should have (e.g. "100").
            keywords:
              type: string
              description: A comma separated list of keywords to use.
            sections:
              description: |
                An array of strings which represent the desired section titles.
              type: array
              items:
                type: string
              summary:
                type: string
                description: A description of the text you wish to generate.
              language:
                type: string
                description: The language to generate the content in.
      produces:
        - text/event-stream
      responses:
        "200":
          description: |
            An event stream produced by Server Side Events. The following
            events are supported.
            - message: an object with the newly generated text (e.g. {"text": "hello"})
            - message: upon completion of events the string "[DONE]" will be emitted
            - fullcontent: an object containing the full response
      summary: Generate new Lilt Create content
      tags:
        - Create
  /create/preferences:
    get:
      description: |+
        Get the stored preferences for Lilt Create.

        Example CURL:
        ```
        curl --X --request POST 'https://lilt.com/2/create/preferences?key=API_KEY'
        ```

      operationId: getLiltCreatePreferences
      produces:
        - application/json
      responses:
        "200":
          description: An object describing the stored preferences.
          schema:
            $ref: "#/definitions/LiltCreatePreferences"
      summary: Get Lilt Create preferences
      tags:
        - Create
    put:
      description: |+
        Update the stored preferences for Lilt Create.

        Example CURL:
        ```
        curl --X --request PUT
        'https://lilt.com/2/create/preferences?key=API_KEY' \
        --header 'Content-Type: application/json' \
        --data-raw '{"tone": "formal", "styleguide": ""}'
        ```

      operationId: updateLiltCreatePreferences
      parameters:
        - in: body
          name: tone
          description: Which tone to use when generating content.
          type: string
          enum:
            - formal
            - casual
            - educational
            - humerous
        - in: body
          name: styleguide
          description: Which styleguide to use.
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: The updated Lilt Create preferences.
          schema:
            $ref: "#/definitions/LiltCreatePreferences"
      summary: Update Lilt Create preferences
      tags:
        - Create
  /create/{contentId}:
    get:
      description: |+
        Get Lilt Create content by ID.

        Example CURL:
        ```
        curl --X --request GET 'https://lilt.com/2/create/1234?key=API_KEY'
        ```

      operationId: getLiltCreateById
      parameters:
        - in: path
          name: contentId
          description: The content ID.
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: The Lilt Create content.
          schema:
            $ref: "#/definitions/LiltCreateContent"
      summary: Get Lilt Create content by ID.
      tags:
        - Create
    put:
      description: |+
        Update a piece of Lilt Create content.

        Example CURL:
        ```
        curl --X --request PUT 'https://lilt.com/2/create/1234?key=API_KEY' \
        --header 'Content-Type: application/json' \
        --data-raw '{"language":"de-DE"}'
        ```

      operationId: updateLiltCreateContent
      parameters:
        - in: path
          name: contentId
          description: The content ID.
          required: true
          type: integer
        - in: body
          name: body
          type: object
          schema:
            $ref: "#/definitions/LiltCreateContent"
      produces:
        - application/json
      responses:
        "200":
          description: The updated Lilt Create content.
          schema:
            $ref: "#/definitions/LiltCreateContent"
      summary: Update Lilt Create content
      tags:
        - Create
    delete:
      description: |+
        Delete a piece of Lilt Create content.

        Example CURL:
        ```
        curl --X --request DELETE 'https://lilt.com/2/create/1234?key=API_KEY'
        ```

      operationId: deleteLiltCreateContent
      parameters:
        - in: path
          name: contentId
          description: The content ID.
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: The Delete Lilt Create Content Response.
          schema:
            type: object
            properties:
              id:
                type: integer
                description: The ID of the deleted Lilt Create content.
      summary: Delete Lilt Create content
      tags:
        - Create
  /create/{contentId}/create:
    get:
      description: |+
        Regenerate the given piece of content with the current parameters.

        Example CURL:
        ```
        curl --X --request GET 'https://lilt.com/2/create/1234/create?key=API_KEY'
        ```

      operationId: regenerateLiltCreateContent
      parameters:
        - in: path
          name: contentId
          description: The content ID.
          required: true
          type: integer
      produces:
        - text/event-stream
      responses:
        "200":
          description: |
            An event stream produced by Server Side Events. The following
            events are supported.
            - message: an object with the newly generated text (e.g. {"text": "hello"})
            - message: upon completion of events the string "[DONE]" will be emitted
            - fullcontent: an object containing the full response
      summary: Regenerate Lilt Create content
      tags:
        - Create
definitions:
  TranslationInfo:
    description: |
      Information describing a batch translation process.
    type: object
    properties:
      id:
        description: Unique identifier for this translation.
        type: integer
      fileId:
        description: id of the File that is being translated.
        type: integer
      status:
        description: Status of the translation - `InProgress`, `ReadyForDownload`, `Completed`, `Failed`.
        type: string
      createdAt:
        description: Time when this translation was started, in seconds since the Unix epoch.
        type: integer
      errorMsg:
        description: Error message, present when status is `Failed`.
        type: string
    example:
      id: 1
      fileId: 2,
      status: "InProgress"
      createdAt: 1609357135
  Error:
    description: |
      Response in the event of an unexpected error.
    type: object
    properties:
      message:
        description: A human-readable message describing the error.
    example:
      message: Internal server error.
  BadRequest:
    description: |
      Response in the event of a malformed request.
    type: object
    properties:
      message:
        description: A human-readable message describing the error.
    example:
      message: Bad Request.
  MonitorFileTranslationTypeError:
    description: |
      Monitor file translation can have different errors based on reasons explained in the examples.
    type: object
    example:
      Unsupported_file_type:
          message: Customer gave us garbage.
      File_extraction_error:
          message: Customer gave us garbage.
      No_translatable_content:
          message: Customer gave us an empty file.
      Batch_MT_initiation_failure:
          message: Something is wrong with MT.
      Batch_MT_response_failure:
          message: Something is wrong with MT.
      File_reassembly_error:
          message: We couldn't put the translated file back together.(okapi error)
      Billing_error:
          message: We couldn't log the information about the MT to our billing system.
      Invalid_memory:
          message: Something is wrong with the memory.
      Storage_error:
          message: Error occurred interacting with file storage.
  TranslateCompletionTypeError:
    description: |
      Response in the event of a malformed error.
    type: object
    properties:
      message:
        description: A human-readable message describing the error.
    example:
      message: Some documents are already marked as complete for review. DocumentIds 22322, 23343
  ReviewCompletionTypeError:
    description: |
      Response in the event of a malformed error.
    type: object
    properties:
      message:
        description: A human-readable message describing the error.
    example:
      message: Some documents' translation is not marked as complete. Complete translation before completing review. DocumentIds 22322, 23343
  Connector:
    description: |
      A Connector is a Lilt managed api bridge between a content source and Lilt services.
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      schedule:
        type: string
      last_check:
        type: string
      healthy:
        type: boolean
      args:
        type: object
      created_at:
        type: string
      updated_at:
        type: string
  ConnectorJob:
    description: |
      A ConnectorJob tracks the status of an import or export action.
    type: object
    properties:
      id:
        type: integer
      status:
        type: string
      args:
        type: object
      created_at:
        type: string
      updated_at:
        type: string
  Job:
    description: |
      A Job is a collection of multiple Projects. Each project is specific to a language pair, and is associated with exactly one Memory for that language pair. The Memory association cannot be changed after the Project is created.
    type: object
    properties:
      name:
        description: A name for the job.
        type: string
        example: My New Job
      creationStatus:
        description: Status of job creation process that includes PENDING, COMPLETE, and FAILED.
        type: string
        example: COMPLETE
      deliveredAt:
        type: string
        format: date-time
        example: "2021-06-03T13:43:00.000Z"
      status:
        description: Current status of job that includes archived, delivered, and active.
        type: string
        example: 'active'
      due:
        description: An ISO string date.
        type: string
        format: date-time
        example: "2021-06-03T13:43:00.000Z"
      id:
        description: An id for the job.
        type: integer
        example: 241
      isProcessing:
        description: Values include `1` while in progress, `0` when idle and `-2` when processing failed.
        type: integer
        example: 0
      stats:
        description: Overview of job's statistical data.
        type: object
        $ref: "#/definitions/JobStats"
  JobStats:
    description: |
      A job stats shows an overview of job's statistical data including total number of exact words, fuzzy words, language pairs, projects, etc.
    type: object
    properties:
      exactWords:
        description: Total number of exact words.
        type: integer
        example: 0
      fuzzyWords:
        description: Total number of fuzzy words.
        type: integer
        example: 0
      newWords:
        description: Total number of fuzzy words.
        type: integer
        example: 0
      numDeliveredProjects:
        description: Total number of delivered projects.
        type: integer
        example: 0
      numLanguagePairs:
        description: Total number of delivered projects.
        type: integer
        example: 0
      numProjects:
        description: Total number of projects.
        type: integer
        example: 0
      percentReviewed:
        description: Overall percentage of documents reviewed.
        type: integer
        example: 0
      percentTranslated:
        description: Overall percentage of documents translated.
        type: integer
        example: 0
      projects:
        type: array
        items:
          $ref: "#/definitions/JobProject"
      sourceWords:
        description: Total number of source words.
        type: integer
        example: 0
      uniqueLanguagePairs:
        description: Number of unique language pairs.
        type: integer
        example: 1
      uniqueLinguists:
        description: Number of unique linguists.
        type: integer
        example: 1
      workflowStatus:
        description: The status of the Workflow for the current job.
        enum:
          - "READY_TO_START"
          - "IN_PROGRESS"
          - "DONE"
        example: "READY_TO_START"
  JobLeverageStats:
    description: |
      A job leverage stats object shows an overview of job's statistical data
      including total number of exact words, fuzzy words, and exact words for
      the job in total and for each project.
    type: object
    properties:
      sourceWords:
        description: Total number of source words.
        type: integer
        example: 0
      exactWords:
        description: Total number of exact words.
        type: integer
        example: 0
      fuzzyWords:
        description: Total number of fuzzy words.
        type: integer
        example: 0
      newWords:
        description: Total number of new words.
        type: integer
        example: 0
      projects:
        type: array
        items:
          $ref: '#/definitions/ProjectStats'
  ProjectStats:
    type: object
    properties:
      id:
        type: integer
        example: 1
      sourceWords:
        type: integer
        example: 1000
      exactWords:
        type: integer
        example: 800
      fuzzyWords:
        type: integer
        example: 150
      newWords:
        type: integer
        example: 50
    required:
      - id
      - sourceWords
      - exactWords
      - fuzzyWords
      - newWords
  JobProject:
    description: |
      A job project contains project statistical data that belongs to a specific job.
    type: object
    properties:
      id:
        description: An id for the project.
        type: integer
        example: en
      srcLang:
        description: Source language, an ISO 639-1 language identifier.
        type: string
        example: en
      srcLocale:
        description: A locale identifier, supported for source language.
        type: string
        example: US
      trgLang:
        description: Target language, an ISO 639-1 language identifier.
        type: string
        example: fr
      trgLocale:
        description: A locale identifier, supported for target language.
        type: string
        example: CA
      name:
        description: A name for the project.
        type: string
        example: My new project
      due:
        description: An ISO date.
        type: string
        example: "2021-10-03T13:43:00.000Z"
      isComplete:
        description: A state that checks project was completed.
        type: boolean
        example: false
      isArchived:
        description: The archived state of the project.
        type: boolean
        example: false
      state:
        description: Current state of the project. Example, backlog, inProgress, inReview, done.
        type: string
        example: inProgress
      numSourceTokens:
        description: Total number of source tokens.
        type: integer
        example: 2134
      createdAt:
        description: Time at which the object was created.
        type: string
        example: "2021-04-01T13:43:00.000Z"
      updatedAt:
        description: Time at which the object was updated.
        type: string
        example: "2021-06-03T13:43:00.000Z"
      isDeleted:
        description: A state that checks project was deleted.
        type: boolean
        example: false
      memoryId:
        description: A unique number identifying the associated Memory.
        type: integer
        example: 2134
      workflowStatus:
        description: The status of the Workflow for the current project.
        enum:
          - "READY_TO_START"
          - "IN_PROGRESS"
          - "DONE"
        example: "READY_TO_START"
      workflowName:
        description: Human readable name of the workflow associated with the current project.
        type: string
        example: "Translate > Review > Analyst Review"
  LanguagePair:
    description: |
      A language pair couples the source and target language along with memory and pre-translations settings associated to a project.
    type: object
    properties:
      srcLang:
        description: Source language, an ISO 639-1 language identifier.
        type: string
        example: en
      srcLocale:
        description: A locale identifier, supported for source language.
        type: string
        example: US
      trgLang:
        description: Target language, an ISO 639-1 language identifier.
        type: string
        example: de
      trgLocale:
        description: A locale identifier, supported for target language.
        type: string
        example: DE
      dueDate:
        description: An ISO date.
        type: string
        example: "2021-10-03T13:43:00.000Z"
      memoryId:
        description: A unique number identifying the associated Memory.
        type: integer
        example: 1241
      externalModelId:
        description: A unique identifier for working with a third party model in the Lilt Platform
        type: integer
        example: 44
      pretranslate:
        description: Attribute translation authorship of exact matches to the creator of the document being pretranslated.
        type: boolean
      autoAccept:
        description: Accept and lock exact matches.
        type: boolean
        example: true
      caseSensitive:
        description: Use case sensitive translation memory matching.
        type: boolean
      takeMatchAttribution:
        description: Use MT for unmatched segments.
        type: boolean
        example: true
      configId:
        description: Configuration id
        type: integer
        example: 2332
      workflowTemplateId:
        type: integer
        example: 14
        description: Workflow Template id, to assign a specific Workflow to the project created out of this Language Pair. WorkflowTemplateIds can be retrieved via the /workflows/templates endpoint. If not specified then the Job level workflowTemplateId will be used.
      workflowTemplateName:
        description: "Workflow Template Name, when passed with TeamId it allows for an on the fly look up of the correct WorkflowTemplate to use. If workflowTemplateId is passed the workflowTemplateId supercedes other lookups."
        type: integer
        example: "Translate > Review"
      workflowStageAssignments:
        type: array
        items:
          $ref: "#/definitions/WorkflowStageAssignment"
    required:
      - trgLang
      - memoryId
  Project:
    description: |
      A Project is a collection of zero or more Documents. It is specific to a language pair, and is associated with exactly one Memory for that language pair. The Memory association cannot be changed after the Project is created.
    type: object
    properties:
      id:
        description: A unique number identifying the Project.
        type: integer
        example: 448
      memory_id:
        description: A unique number identifying the associated Memory.
        type: integer
        example: 1234
      job_id:
        description: A unique number identifying the associated Job.
        type: integer
        example: 1234
      srclang:
        description: An ISO 639-1 language identifier.
        type: string
        example: en
      trglang:
        description: An ISO 639-1 language identifier.
        type: string
        example: fr
      srclocale:
        description: "A locale identifier, supported for srclang."
        type: string
        example: US
      trglocale:
        description: "A locale identifier, supported for trglang."
        type: string
        example: FR
      name:
        description: A name for the project.
        type: string
        example: My New Project
      state:
        description: "The project's state. The possible states are `backlog`, `inProgress`, `inReview`, `inQA`, and `done`."
        type: string
        example: backlog
      due_date:
        description: The due date. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      archived:
        description: The archived state of the Project.
        type: boolean
        example: false
      metadata:
        description: A JSON object of key/value string pairs. Stores custom project information.
        type: object
        example:
          connectorType: github
          notes: example metadata
      sample_review_percentage:
        description: The project's sample review percentage.
        type: integer
        example: 20
      created_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      updated_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      workflowStatus:
        description: The status of the Workflow for the current project. This may not be present for all project endpoints even with workflows enabled.
        enum:
          - "READY_TO_START"
          - "IN_PROGRESS"
          - "DONE"
        example: "READY_TO_START"
      document:
        description: A list of Documents.
        type: array
        items:
          $ref: "#/definitions/DocumentWithoutSegments"
  ProjectQuote:
    description: |
      Quoting information for a Project.
    type: object
    properties:
      id:
        description: A unique Project identifier.
        type: integer
        example: 21902
      num_source_words:
        description: The number of source words in the Project.
        type: integer
        example: 8000
      num_words_new:
        description: The number of new source words in the Project.
        type: integer
        example: 6039
      num_segments_new:
        description: The number of new segments in the Project.
        type: integer
        example: 151
      num_words_repetition:
        description: The number of repetition source words in the Project.
        type: integer
        example: 12
      num_segments_repetition:
        description: The number of repetition segments in the Project.
        type: integer
        example: 2980000
      bands:
        description: A list of MatchBand objects that represent translation memory leverage statistics.
        type: array
        items:
          $ref: "#/definitions/MatchBand"
      documents:
        description: A list of DocumentQuote objects that quotes information for a Document.
        type: array
        items:
          $ref: "#/definitions/DocumentQuote"
  DocumentQuote:
    description: |
      Quoting information for a Document.
    type: object
    properties:
      id:
        description: A unique Document identifier.
        type: integer
        example: 21902
      num_source_words:
        description: The number of source words in the Document.
        type: integer
        example: 8000
      num_words_new:
        description: The number of new source words in the Document.
        type: integer
        example: 6039
      num_segments_new:
        description: The number of new segments in the Document.
        type: integer
        example: 151
      num_words_repetition:
        description: The number of repetition source words in the Document.
        type: integer
        example: 12
      num_segments_repetition:
        description: The number of repetition segments in the Document.
        type: integer
        example: 2980000
      bands:
        description: A list of MatchBand objects that represent translation memory leverage statistics.
        type: array
        items:
          $ref: "#/definitions/MatchBand"
  MatchBand:
    description: |
      A translation memory match band.
    type: object
    properties:
      minimum_score:
        description: The minimum fuzzy match score.
        type: integer
        example: 94
      maximum_score:
        description: The maximum fuzzy match score.
        type: integer
        example: 85
      num_source_words:
        description: The number of source words in the band.
        type: integer
        example: 151
      num_segments:
        description: The number of source segments in the band.
        type: integer
        example: 12
  ProjectStatus:
    description: |
      The status of a Project.
    type: object
    properties:
      id:
        description: A unique Project identifier.
        type: integer
        example: 21902
      num_source_words:
        description: The number of source words in the Project.
        type: integer
        example: 6039
      num_words_confirmed:
        description: The number of confirmed source words.
        type: integer
        example: 151
      num_words_reviewed:
        description: The number of reviewed source words.
        type: integer
        example: 12
      time_elapsed:
        description: The total time spent on the project by all resources. Measured in milliseconds.
        type: integer
        example: 2980000
      time_elapsed_translation:
        description: The total time spent on translation by all resources. Measured in milliseconds.
        type: integer
        example: 33487
      time_elapsed_research:
        description: The total time spent on research by all resources. Measured in milliseconds.
        type: integer
        example: 912348
      time_elapsed_review:
        description: The total time spent on reviewing by all resources. Measured in milliseconds.
        type: integer
        example: 66521
      updated_at:
        description: The project update date and time. Measured in seconds.
        type: integer
        example: 1656513752
      resources:
        description: A list of ResourceStatus objects that represent per-resource statistics.
        type: array
        items:
          $ref: "#/definitions/ResourceStatus"
  ResourceStatus:
    description: |
      The status of a resource working on a Project.
    type: object
    properties:
      email:
        description: An email address.
        type: string
        example: joe.strummer@lilt.com
      name:
        description: The full name.
        type: string
        example: Joe Strummer
      num_words_confirmed:
        description: The number of source words confirmed.
        type: integer
        example: 151
      num_words_new:
        description: The number of new source words confirmed.
        type: integer
        example: 12
      num_words_fuzzy:
        description: The number of fuzzy match source words confirmed.
        type: integer
        example: 24
      num_words_exact:
        description: The number of exact match source words confirmed.
        type: integer
        example: 56
      num_words_reviewed:
        description: The number of source words reviewed.
        type: integer
        example: 182
      time_elapsed:
        description: The total time spent on translation and research. Measured in milliseconds.
        type: integer
        example: 1172000
      time_elapsed_translation:
        description: The total time spent translating. Measured in milliseconds.
        type: integer
        example: 1172000
      time_elapsed_research:
        description: The total time spent on research. Measured in milliseconds.
        type: integer
        example: 1172000
      time_elapsed_review:
        description: The total time spent reviewing. Measured in milliseconds.
        type: integer
        example: 1172000
      num_segments_confirmed:
        description: The number of source segments confirmed.
        type: integer
        example: 25
      num_segments_reviewed:
        description: The number of source segments reviewed.
        type: integer
        example: 30
  SourceFile:
    description: A SourceFile is an unprocessed source file that can later be added to a project.
    type: object
    properties:
      id:
        description: A unique number identifying the SourceFile.
        type: integer
        example: 46530
      name:
        description: The file name.
        type: string
        example: en_US.json
      file_hash:
        description: A unique hash value associated with the file. An MD5 hash of the file content will be used by default.
        type: string
        example: 3858f62230ac3c915f300c664312c63f
      detected_lang:
        description: Language associated with the file.
        type: string
        example: de
      detected_lang_confidence:
        description: Confidence score for the language associated with the file.
        type: number
        example: 0.70
      category:
        description: The category of the file. The options are `REFERENCE`, or `API`. The default is API. Files with the `REFERENCE` category will be displayed as reference material.
        type: string
        example: REFERENCE
      labels:
        description: The list of labels associated with the file.
        type: array
        items:
          type: string
        example: []
      created_at:
        description: Time at which the object was created.
        type: string
        format: date-time
        example: 2019-10-16T22:12:34.000Z
      updated_at:
        description: Time at which the object was created.
        type: string
        format: date-time
        example: 2019-10-16T22:12:34.000Z
  DocumentWithoutSegments:
    description: |
      A Document is a collection of zero or more Segments.
    type: object
    properties:
      id:
        description: A unique number identifying the Document.
        type: integer
        example: 46530
      project_id:
        description: A unique number identifying the Project.
        type: integer
        example: 287
      srclang:
        description: An ISO 639-1 language identifier.
        type: string
        example: en
      trglang:
        description: An ISO 639-1 language identifier.
        type: string
        example: de
      name:
        description: The document name.
        type: string
        example: Introduction.xliff
      import_in_progress:
        description: True if the document is currently being imported
        type: boolean
        example: false
      import_succeeded:
        description: True if the import process succeeded.
        type: boolean
        example: false
      import_error_message:
        description: Error message if `import_succeeded=false`
        type: string
        example: Could not parse XML.
      export_in_progress:
        description: True if the document is currently being exported for download
        type: boolean
        example: false
      export_succeeded:
        description: True if the export process succeeded.
        type: boolean
        example: false
      export_error_message:
        description: Error message if `export_succeeded=false`
        type: string
        example: Could not parse XML.
      is_pretranslating:
        description: True if the document is currently being pretranslated.
        type: boolean
        example: false
      status:
        description: A list of translations for the query term.
        type: object
        properties:
          pretranslation:
            description: ""
            type: string
            enum:
              - idle
              - pending
              - running
            example: idle
        example:
          pretranslation: idle
      translator_email:
        description: The email of the assigned translator.
        type: string
        example: "translator@example.com"
      reviewer_email:
        description: The email of the assigned reviewer.
        type: string
        example: "reviewer@example.com"
      customer_reviewer_email:
        description: The email of the assigned customer reviewer. Only present if the project was request by id.
        type: string
        example: "reviewer@example.com"
      created_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      updated_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      is_review_complete:
        description: Document review status.
        type: boolean
        example: true
  DocumentWithSegments:
    description: |
      A Document is a collection of zero or more Segments.
    type: object
    properties:
      id:
        description: A unique number identifying the Document.
        type: integer
        example: 46530
      project_id:
        description: A unique number identifying the Project.
        type: integer
        example: 287
      srclang:
        description: An ISO 639-1 language identifier.
        type: string
        example: en
      trglang:
        description: An ISO 639-1 language identifier.
        type: string
        example: de
      name:
        description: The document name.
        type: string
        example: Introduction.xliff
      import_in_progress:
        description: True if the document is currently being imported
        type: boolean
        example: false
      import_succeeded:
        description: True if the import process succeeded.
        type: boolean
        example: false
      import_error_message:
        description: Error message if `import_succeeded=false`
        type: string
        example: Could not parse XML.
      export_in_progress:
        description: True if the document is currently being exported for download
        type: boolean
        example: false
      export_succeeded:
        description: True if the export process succeeded.
        type: boolean
        example: false
      export_error_message:
        description: Error message if `export_succeeded=false`
        type: string
        example: Could not parse XML.
      is_pretranslating:
        description: True if the document is currently being pretranslated.
        type: boolean
        example: false
      status:
        description: A list of translations for the query term.
        type: object
        properties:
          pretranslation:
            description: ""
            type: string
            enum:
              - idle
              - pending
              - running
            example: idle
        example:
          pretranslation: idle
      translator_email:
        description: The email of the assigned translator.
        type: string
        example: "translator@example.com"
      reviewer_email:
        description: The email of the assigned reviewer.
        type: string
        example: "reviewer@example.com"
      created_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      updated_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      is_review_complete:
        description: Document review status.
        type: boolean
        example: true
      segments:
        description: A list of Segments.
        type: array
        items:
          $ref: "#/definitions/Segment"
  ConverterConfigMap:
    description: |
      A map of config ids to converter configs.
    type: object
    additionalProperties:
      type: string
    example:
      "145": "{\"registry\": {\".xlsx\": {\"type\": \"OkapiFprm\", \"version\": 1, \"filterName\": \"okf_openxml\", \"filterConfig\": \"#v1\\nbPreferenceTranslateDocProperties.b=false\\nbPreferenceTranslateComments.b=true\\nbPreferenceTranslatePowerpointNotes.b=true\\nbPreferenceTranslatePowerpointMasters.b=true\\nbPreferenceIgnorePlaceholdersInPowerpointMasters.b=false\\nbPreferenceTranslateWordHeadersFooters.b=true\\nbPreferenceTranslateWordHidden.b=false\\nbPreferenceTranslateWordExcludeGraphicMetaData.b=true\\nbPreferenceTranslatePowerpointHidden.b=false\\nbPreferenceTranslateExcelHidden.b=false\\nbPreferenceTranslateExcelExcludeColors.b=false\\nbPreferenceTranslateExcelExcludeColumns.b=false\\nbPreferenceTranslateExcelSheetNames.b=false\\nbPreferenceAddLineSeparatorAsCharacter.b=false\\nsPreferenceLineSeparatorReplacement=$0a$\\nbPreferenceReplaceNoBreakHyphenTag.b=false\\nbPreferenceIgnoreSoftHyphenTag.b=false\\nbPreferenceAddTabAsCharacter.b=false\\nbPreferenceAggressiveCleanup.b=true\\nbPreferenceAutomaticallyAcceptRevisions.b=true\\nbPreferencePowerpointIncludedSlideNumbersOnly.b=false\\nbPreferenceTranslateExcelDiagramData.b=false\\nbPreferenceTranslateExcelDrawings.b=false\\nsubfilter=okf_plaintext\\nbInExcludeMode.b=true\\nbInExcludeHighlightMode.b=true\\nbPreferenceTranslateWordExcludeColors.b=false\\nbReorderPowerpointNotesAndComments.b=true\\ntsComplexFieldDefinitionsToExtract.i=1\\ncfd0=HYPERLINK\\ntsExcelExcludedColors.i=0\\ntsExcelExcludedColumns.i=0\\ntsExcludeWordStyles.i=0\\ntsWordHighlightColors.i=0\\ntsWordExcludedColors.i=0\\ntsPowerpointIncludedSlideNumbers.i=0\\nbExtractExternalHyperlinks.b=false\\n\", \"extractAllTags\": true, \"exportReplacements\": {\"patterns\": [], \"replacements\": []}, \"importReplacements\": {\"patterns\": [], \"replacements\": []}}}}"
      "432": "{\"registry\": {\".md\": {\"type\": \"OkapiFprm\", \"version\": 1, \"filterName\": \"okf_markdown\", \"filterConfig\": \"#v1\\nuseCodeFinder.b=false\\ntranslateUrls.b=true\\nurlToTranslatePattern=.+\\ntranslateCodeBlocks.b=false\\ntranslateInlineCodeBlocks.b=true\\ntranslateHeaderMetadata.b=true\\ntranslateImageAltText.b=true\\nuseLinkSubflow.b=true\\ncodeFinderRules.count.i=1\\ncodeFinderRules.rule0=\\\\{\\\\{[^}]+\\\\}\\\\}\\ncodeFinderRules.sample={{#test}} handle bar test {{/test}}$0a${{stand-alone handle bar}}$0a$\\ncodeFinderRules.useAllRulesWhenTesting.b=true\\n\", \"extractAllTags\": true, \"exportReplacements\": {\"patterns\": [], \"replacements\": []}, \"importReplacements\": {\"patterns\": [], \"replacements\": []}}}"
  LexiconEntry:
    description: |
      An Lexicon entry for a source term or phrase.
    type: object
    properties:
      translations:
        description: A list of translations for the query term.
        type: array
        items:
          type: object
          properties:
            source:
              description: The source string.
              type: string
            target:
              description: The target string.
              type: string
            frequency:
              description: The frequency of the term in the Lexicon.
              type: number
            memory_id:
              description: |
                A unique Memory identifier. If this identifier is missing, then
                the term comes from the generic termbase.
              type: number
        example: []
      examples:
        description: A list of concordance examples for the query term.
        type: array
        items:
          type: object
          properties:
            source:
              description: The source string.
              type: string
            sourceDelimiters:
              description: |
                A format string that indicates, for each word, if the source word
                should be preceded by a space.
              type: array
              items:
                type: string
            target:
              description: The target string
              type: string
            targetDelimiters:
              description: |
                A format string that indicates, for each word, if the target word
                should be preceded by a space.
              type: array
              items:
                type: string
            sourceSpan:
              description: An object that indicates where the query term appears in the source.
              type: object
              properties:
                start:
                  description: |
                    The zero-indexed start index when `source` is split on whitespace.
                  type: number
                length:
                  description: |
                    The length in words after `start` of the source query term.
                  type: number
            targetSpan:
              description: |
                An object that indicates the location in the target of contiguous
                words that align with the source query.
              type: object
              properties:
                start:
                  description: |
                    The zero-indexed start index when `target` is split on whitespace.
                  type: number
                length:
                  description: |
                    The length in words after `start` of the target aligned
                    phrase.
                  type: number
            similarity:
              type: number
            memory_id:
              description: |
                A unique Memory identifier. If this identifier is missing, then
                the term comes from the generic concordance.
              type: number
          example:
            - source: Waschmaschine
              sourceDelimiters:
                - ""
                - ""
              target:
                - washing
                - machine
              targetDelimiters:
                - ""
                - " "
                - ""
              sourceSpan:
                start: 0
                length: 1
              targetSpan:
                start: 1
                length: 1
              similarity: 0
              memoryId: 10641
  DocumentPretranslating:
    description: |
      Document object for which pretranslation was requested.
    type: object
    properties:
      id:
        description: A status object indicating the pretranslation status.
        type: number
        example: 123
      import_in_progress:
        description: Indicates that the document is being imported.
        type: boolean
        example: false
      import_succeeded:
        description: Indicates that the document was successfully imported.
        type: boolean
        example: true
      import_error_message:
        description: Indicates there was an error importing the document.
        type: string
        example: ""
      is_processing:
        description: Indicates the document is being processed.
        type: boolean
        example: false
      is_pretranslating:
        description: Indicates the document is being pretranslated.
        type: boolean
        example: true
      status:
        description: A status object indicating the pretranslation status.
        type: object
        properties:
          pretranslation:
            description: ""
            type: string
            example: running
        example:
          pretranslation: running
  Memory:
    description: |
      A Memory is a collection of parallel (source/target) segments
      from which a MT/TM model is trained. When a translator confirms
      a segment in the Interface, a parallel segment is added to the
      Memory. Parallel segments from existing translation memories and
      bitexts can also be added to the Memory via the REST API.
    type: object
    properties:
      id:
        description: A unique number identifying the Memory.
        type: integer
        example: 1234
      srclang:
        description: An ISO 639-1 language identifier.
        type: string
        example: en
      trglang:
        description: An ISO 639-1 language identifier.
        type: string
        example: fr
      srclocale:
        description: An ISO 639-1 language identifier.
        type: string
        example: US
      trglocale:
        description: An ISO 639-1 language identifier.
        type: string
        example: FR
      name:
        description: A name for the Memory.
        type: string
        example: Acme Corp Support Content
      is_processing:
        description: Indicates the memory is being processed.
        type: boolean
        example: false
      version:
        description: "The current version of the Memory, which is the number of updates since the memory was created."
        type: integer
        example: 78
      created_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      updated_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      resources:
        description: The resource files (translation memories and termbases) associated with this Memory.
        type: array
        items:
          type: string
  SDLXLIFFFilter:
    type: object
    required:
      - confName
    properties:
      confName:
        description: the current state of the SDLXLIFF Trans Unit.
        type: string
        enum:
          - 'Translated'
          - 'Draft'
          - 'ApprovedTranslation'
          - 'Locked'
          - 'SignedOff'
      allowablePercentage:
        description: This represents for the current conf_name what percentage the filter applies to.  If you pass -1 it will take any value for this field and won't ignore blank values. If you pass 50, Lilt will only import Segments that have a 50 percent match or better.
        type: integer
      allowUnlockedSegments:
        description: Boolean that tells Lilt whether we should allow unlocked Segments for this conf_name.
        type: boolean
  Translation:
    description: A machine translation (MT) or a translation memory (TM) match of a source segment.
    type: object
    properties:
      target:
        description: The target string.
        type: string
      targetWithTags:
        description: The target string with source tags projected into the target.
        type: string
      align:
        description: |
          "MT only: A whitespace delimited list of source-target alignment indices."
        type: string
      provenance:
        description: |
          Positive values indicate that the word is from the Memory,
          with contiguous identical entries (e.g., 2 2) indicating
          phrase matches. Negative contiguous values indicate entries from the Lexicon.
          0 indicates a word from the background data.
        type: string
      score:
        description: The score of the translation.
        type: number
      isTMMatch:
        description: "TM only: If true, indicates an exact translation memory match."
        type: boolean
      targetDelimiters:
        description: "A format string that indicates, for each word, if the word should be preceded by a space."
        type: array
        items:
          type: string
      targetWords:
        description: |
          The target string can be constructed by suffixing each `targetDelimiters` entry with its corresponding word in `targetWords` and concatenating the constructed array.
          Please note that the `targetDelimiters` array has one more entry than `targetWords` array which is why the last entry in the array will be the last value of `targetDelimiters`.
        type: array
        items:
          type: string
    example:
      - score: 3.4936864e-8
        align: 0-0 1-1 2-2 3-3
        targetDelimiters:
          - ""
          - " "
          - " "
          - ""
          - ""
        targetWords:
          - Authentifizierung
          - nicht
          - erforderlich
          - .
        target: Authentifizierung nicht erforderlich .
        targetWithTags: Authentifizierung nicht erforderlich.
        isTMMatch: false
        provenance: 0 0 0 0
  TranslationList:
    description: An ranked list of translations and associated metadata.
    type: object
    properties:
      untokenizedSource:
        description: The untokenized source segment. Punctuation has not been separated from words.
        type: string
        example: Authentication not required.
      tokenizedSource:
        description: The tokenized source segment. Punctuation has been separated from words.
        type: string
        example: Authentication not required .
      sourceDelimiters:
        description: "A format string that indicates, for each word, if the word should be preceded by a space."
        type: array
        items:
          type: string
        example:
          - ""
          - " "
          - " "
          - ""
          - ""
      translation:
        description: A list of Translation objects.
        type: array
        items:
          $ref: "#/definitions/Translation"
  Segment:
    description: |
      A Segment is a source string and, optionally, its translation. A Segment can be associated with both a Memory and a Document. The Segment object contains additional metadata about the source and target strings.
    type: object
    properties:
      id:
        description: A unique number identifying the Segment.
        type: integer
        example: 84480010
      created_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      updated_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      document_id:
        description: A unique Document identifier.
        type: integer
        example: 1234
      memory_id:
        description: The Memory with which this Segment is associated.
        type: integer
        example: 5678
      source:
        description: The source string.
        type: string
        example: The red bus.
      srclang:
        description: An ISO 639-1 language code.
        type: string
        example: en
      target:
        description: The target string.
        type: string
        example: Le bus rouge.
      trglang:
        description: An ISO 639-1 language code.
        type: string
        example: fr
      is_confirmed:
        description: The confirmation status.
        type: boolean
        example: true
      is_reviewed:
        description: The review status.
        type: boolean
        example: true
  SegmentWithComments:
    description: |
      A Segment is a source string and, optionally, its translation. A Segment can be associated with both a Memory and a Document. The Segment object contains additional metadata about the source and target strings.
    type: object
    properties:
      id:
        description: A unique number identifying the Segment.
        type: integer
        example: 84480010
      created_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      updated_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
      document_id:
        description: A unique Document identifier.
        type: integer
        example: 1234
      memory_id:
        description: The Memory with which this Segment is associated.
        type: integer
        example: 5678
      source:
        description: The source string.
        type: string
        example: The red bus.
      srclang:
        description: An ISO 639-1 language code.
        type: string
        example: en
      target:
        description: The target string.
        type: string
        example: Le bus rouge.
      trglang:
        description: An ISO 639-1 language code.
        type: string
        example: fr
      is_confirmed:
        description: The confirmation status.
        type: boolean
        example: true
      is_reviewed:
        description: The review status.
        type: boolean
        example: true
      comments:
        description: A list of Comments.
        type: array
        items:
          $ref: "#/definitions/Comment"
  Comment:
    description: |
      A Comment is a translator's or a reviewer's comment on a segment.
    type: object
    properties:
      id:
        description: A unique number identifying the Comment.
        type: integer
        example: 84480010
      text:
        description: The comment text.
        type: string
        example: This is incorrect.
      annotations:
        description: A list of optional Annotations.
        type: array
        items:
          $ref: "#/definitions/Annotation"
      is_resolved:
        description: Whether the Comment is resolved.
        type: boolean
        example: true
      document_id:
        description: The document to which the comment belongs.
        type: integer
        example: 5678
      segment_id:
        description: The individual segment to which the comment applies.
        type: integer
        example: 5678
      segment_revision_id:
        description: The revision of the individual segment to which the comment applies.
        type: integer
        example: 5678
      user_id:
        description: The user who created this comment.
        type: integer
        example: 5678
      created_at:
        description: Time at which the object was created. Measured in seconds since the Unix epoch.
        type: integer
        example: 1489147692
  CommentBody:
    description: |
      The body of a comment being created or updated.
    type: object
    properties:
      text:
        description: The main comment value.
        type: string
        example: "Please update this segment"
      annotations:
        description: A list of optional Annotations.
        type: array
        items:
          $ref: "#/definitions/Annotation"
      isResolved:
        description: An optional value indicating whether the comment has been resolved, defaults to `false`. Resolved comments will not be returned in subsequent requests.
        type: string
        example: false
  DocumentComments:
    description: |
      A set of comments for a given document, grouped with Segment ID as the key.
    type: object
    properties:
      1234567:
        type: array
        items:
          $ref: "#/definitions/Comment"
  Annotation:
    description: |
      A Comment's annotation.
    type: object
    properties:
      text:
        description: The Comment's annotation text.
        type: string
        example: mistranslation
  TaggedSegment:
    description: A source string with tags automatically projected from source to target.
    type: object
    properties:
      source_tagged:
        description: The tagged source string.
        type: string
        example: The <b>red bus.</b>
      target_tagged:
        description: The tagged target string.
        type: string
        example: Le <b>bus rouge.</b>
  TranslationMemoryEntry:
    description: A translation memory entry.
    type: object
    properties:
      source:
        description: The source string.
        type: string
        example: The red bus.
      target:
        description: The target string. Tags will be automatically placed according to the query string.
        type: string
        example: Le bus rouge.
      score:
        description: The fuzzy match score.
        type: integer
        example: 100
      metadata:
        description: Attributes describing the translation memory entry.
        type: object
  QARuleMatches:
    description: QA rules describing the errors in the text.
    type: object
    properties:
      matches:
        items:
          properties:
            context:
              properties:
                length:
                  description: The length of the error in characters in the context.
                  type: integer
                  example: 7
                offset:
                  description: The 0-based character offset of the error in the context text.
                  type: integer
                  example: 19
                text:
                  description: "Context of the error, i.e. the error and some text to the left and to the left."
                  type: string
                  example: This segment has a speling mistake
              required:
                - text
                - offset
                - length
              type: object
            length:
              description: The length of the error in characters.
              type: integer
              example: 7
            message:
              description: Message about the error displayed to the user.
              type: string
              example: Possible spelling mistake found
            offset:
              description: The 0-based character offset of the error in the text.
              type: integer
              example: 19
            replacements:
              description: "Replacements that might correct the error. The array can be empty, in this case there is no suggested replacement."
              items:
                properties:
                  value:
                    description: the replacement string
                    type: string
                type: object
              type: array
              example:
                - value: spelling
                - value: spewing
                - value: spieling
            rule:
              properties:
                category:
                  properties:
                    id:
                      description: A category's identifier that's unique for this language.
                      type: string
                      example: TYPOS
                    name:
                      description: A short description of the category.
                      type: string
                      example: Possible Typo
                  type: object
                description:
                  type: string
                  example: Possible spelling mistake
                id:
                  description: An rule's identifier that's unique for this language.
                  type: string
                  example: MORFOLOGIK_RULE_EN_US
                issueType:
                  description: "The Localization Quality Issue Type. This is not defined for all languages, in which case it will always be 'Uncategorized'."
                  type: string
                  example: misspelling
                subId:
                  description: "An optional sub identifier of the rule, used when several rules are grouped."
                  type: string
                  example: ""
                urls:
                  description: An optional array of URLs with a more detailed description of the error.
                  items:
                    properties:
                      value:
                        description: the URL
                        type: string
                    type: object
                  type: array
                  example: []
              required:
                - id
                - description
                - category
              type: object
            shortMessage:
              description: An optional shorter version of 'message'.
              type: string
              example: Spelling mistake
          required:
            - message
            - offset
            - length
            - replacements
            - context
          type: object
        type: array
      custom_rules:
        type: array
        items:
          properties:
            description:
              description: A QA warning defined by a custom rule.
              type: string
              example: "Mistake detected by a custom rule."
  SettingDictionary:
    type: object
    description: A dictionary of configuration settings, keyed by setting name
    additionalProperties:
      $ref: "#/definitions/Setting"
  SettingUpsertResponse:
    type: object
    description: Response from upserting a setting
    properties:
      scopedSetting:
        type: object
        description: the setting instance for the scope
        $ref: "#/definitions/Setting"
      activeSettings:
        type: object
        description: A setting dictionary containing the new active value for the setting.
        $ref: '#/definitions/SettingDictionary'
  Setting:
    type: object
    description: A configuration setting.
    properties:
      id:
        type: integer
        description: The identifier of the setting.
        format: int32
      name:
        type: string
        description: The name of the setting.
      valueType:
        type: string
        description: the type of value the setting may have - Boolean, Json, Number, String.
      value:
        type: string | integer | object | boolean
        description: The active value of the setting.
      defaultValue:
        type: string | integer | object | boolean
        description: The active value of the setting.
      isUserFacing:
        type: boolean
        description: Whether the setting is editable by the user.
      isDefault:
        type: boolean
        description: True when the setting value is inherited from the default setting.
  SettingUpsertBody:
    type: object
    description: Body to create or update a setting.
    required:
      - settingName
      - scope
    properties:
      settingName:
        type: string
        description: The name of the setting.
        example: requireBatchQaTranslator
      scope:
        type: string
        description: The entity scope the setting should be applied to.
        example: Organization
      value:
        type: string | integer | object | boolean
        description: The active value of the setting.
        default: false
      isEnforced:
        type: boolean
        description: |+
          Whether this value should override others set for the same setting key.
      projectId:
        type: number
        description: |
          Id of the the project the setting will be applied to. Required when scope is `Project`.
      organizationId:
        type: number
        description: |
          Id of the the project the setting will be applied to. Required when scope is `Organization`.
        example: 123
  AutoAssignmentResponse:
    type: object
    description: Auto assignment status.
    required:
      - "projectId"
      - "success"
    properties:
      projectId:
        type: number
        description: The id of the project.
        example: 123
      success:
        type: boolean
        description: True if the operation was successful for this project.
      error:
        type: string
        description: An optional error message if success = false
      errors:
        description: A list of errors if there were any.
        type: array
        items:
          $ref: '#/definitions/AssignmentError'
      assignments:
        description: Assignment details, like which user was assigned and which role.
        type: array
        items:
          $ref: '#/definitions/AssignmentDetails'
  AssignmentError:
    type: object
    required:
      - errorType
      - projectId
      - documentId
      - error
    properties:
      errorType:
        type: string
        example: "LINGUIST_MAY_BE_DELETED"
      projectId:
        type: integer
        example: 123
      documentId:
        type: integer
        example: 456
      error:
        type: string
        example: "Linguist may be deleted"
  AssignmentDetails:
    type: object
    properties:
      isPreferredTranslator:
        type: boolean
        example: true
      wordsLeftAveragedTranslator:
        type: integer
        example: 56
      wordsLeftAveragedReviewer:
        type: integer
        example: 56
      assignmentErrors:
        type: array
        items:
          type: string
          example: "Error message"
      docId:
        type: integer
        example: 56
      projectId:
        type: integer
        example: 56
      isAutoAssigned:
        type: boolean
        example: true
      translatorUserId:
        type: integer
        example: 56
      translatorRoleId:
        type: integer
        example: 56
      translatorDueDate:
        type: string
        example: '2023-03-28T16:00:00Z'
      reviewerUserId:
        type: integer
        example: 56
  WorkflowTemplate:
    type: object
    description: A workflow template which defines the workflow's possible steps (combination of Translation, Review and Customer Review).
    properties:
      id:
        type: number
        example: 15
        description: Identifier of a teams Workflow template. Can be used during Job creation for specifying the workflow used for a job or language pair.
      name:
        type: string
        example: "Translate > Review > Customer Review"
      TeamId:
        type: number
        example: 100
        description: The name of a given Workflow template.
      stages:
        type: array
        description: The stages in this workflow template.
        items:
          type: object
          $ref: "#/definitions/WorkflowStageTemplate"
  WorkflowStageTemplate:
    type: object
    description: A single stage within a Workflow Template.
    properties:
      name:
        type: string
        example: "Translate"
        description: The human readable name of a Workflow stage.
      assignmentType:
        type: string
        description: An enum to represent all possible types of Workflow stage.
        enum:
          - "READY_TO_START"
          - "TRANSLATE"
          - "REVIEW"
          - "SECONDARY_REVIEW"
          - "DONE"
        example: "TRANSLATE"
  WorkflowStageAssignment:
    type: object
    description: An assignment object that associates a user to a workflow stage template.
    properties:
      workflowStageTemplateId:
        example: 12345
        type: integer
      userId:
        example: 123
        type: integer
      email:
        example: username@domain.com
        type: string
    required:
      - workflowStageTemplateId
  DocumentWorkflow:
    type: object
    description: Workflow metadata related to a document.
    properties:
      documentId:
        type: integer
        example: 12345
        description: Identifier of a document.
      workflowId:
        type: integer
        example: 1111
        description: Identifier for a Workflow that the document is using.
      stages:
        type: array
        description: The stages in the document's workflow.
        items:
          $ref: "#/definitions/WorkflowStage"
      currentTask:
        type: object
        $ref: "#/definitions/WorkflowTask"
        description: Information about the current Workflow stage of a document.
  WorkflowStage:
    type: object
    description: Workflow stage information.
    required:
      - name
      - assignmentType
    properties:
      id:
        type: integer
        example: 1
        description: Identifier of the stage.
      name:
        type: string
        example: "Translate"
        description: Name of the stage.
      active:
        type: boolean
        example: true
        description: Flag which is set to true when the stage is active for a document.
      assignmentType:
        type: string
        description: An enum to represent all possible types of Workflow stage.
        enum:
          - "READY_TO_START"
          - "TRANSLATE"
          - "REVIEW"
          - "SECONDARY_REVIEW"
          - "DONE"
        example: "TRANSLATE"
  WorkflowTask:
    type: object
    description: Information about a workflow task.
    required:
      - id
      - workflowStageId
      - name
      - enteredAt
    properties:
      id:
        type: integer
        description: Identifier of the current workflow task.
        example: 1
      workflowStageId:
        type: integer
        description: Identifier of the current workflow stage.
        example: 123
      name:
        type: string
        description: Name of the current workflow stage.
        example: "Review"
      enteredAt:
        type: string
        format: Date
        description: Date and time when task was created.
        example: "2022-09-09T21:33:21.000Z"
      startedAt:
        type: string
        format: Date
        description: Date and time when task was started.
        example: "2022-09-09T21:33:21.000Z"
  NextWorkflowTask:
    type: object
    description: Information about a document workflow task after it has moved a stage.
    required:
      - status
    properties:
      status:
        type: string
        description: Identifier of the current workflow task.
        enum:
          - "SUCCESS"
          - "WORKFLOW_FINISHED"
          - "ALREADY_AT_START"
          - "INVALID_ARGUMENT"
          - "POSTCONDITIONS_FAILED"
          - "UNKNOWN_ERROR"
        example: "SUCCESS"
      newTaskId:
        type: integer
        description: The identifier of the workflow task that is now currently active.
        example: 123
      newStageName:
        type: string
        description: The name of the workflow task that is now currently active.
        example: "Review"
  LiltCreateContent:
    type: object
    properties:
      id:
        type: integer
        description: The identifier.
      name:
        type: string
        description: The name of the content.
      template:
        type: string
        description: The template used fort this content.
      templateParams:
        type: object
        properties:
          memoryId:
            type: integer
            description: The memory ID.
      content:
        type: string
        description: The generated content.
      language:
        type: string
        description: The language used for this content.
      createdAt:
        description: Time at which the content was created.
        type: string
        example: "2021-04-01T13:43:00.000Z"
      updatedAt:
        description: Time at which the content was updated.
        type: string
        example: "2021-06-03T13:43:00.000Z"
  LiltCreatePreferences:
    type: object
    properties:
      tone:
        type: string
        description: formal, casual, educational, humorous
      styleguide:
        type: string
        description: Writing style
      llmProvider:
        type: string
        description: LLM Provider to use.
